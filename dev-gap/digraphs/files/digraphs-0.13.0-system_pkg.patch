diff --git a/Makefile.am b/Makefile.am
index ff3b59a..51819b4 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -12,11 +12,6 @@ GAPINSTALLLIB = $(abs_top_srcdir)/$(BINARCHDIR)/digraphs.so
 lib_LTLIBRARIES = digraphs.la
 
 digraphs_la_SOURCES = src/digraphs.c src/homos.c src/perms.c src/schreier-sims.c
-digraphs_la_SOURCES += src/bliss-0.73/defs.cc src/bliss-0.73/graph.cc 
-digraphs_la_SOURCES += src/bliss-0.73/partition.cc src/bliss-0.73/orbit.cc
-digraphs_la_SOURCES += src/bliss-0.73/uintseqhash.cc src/bliss-0.73/heap.cc
-digraphs_la_SOURCES += src/bliss-0.73/timer.cc src/bliss-0.73/utils.cc 
-digraphs_la_SOURCES += src/bliss-0.73/bliss_C.cc
 
 digraphs_la_CPPFLAGS = $(GAP_CPPFLAGS)
 digraphs_la_CXXFLAGS = -O3 -march=native -mpopcnt
diff --git a/src/digraphs-debug.h b/src/digraphs-debug.h
index f1006cc..338c0d1 100644
--- a/src/digraphs-debug.h
+++ b/src/digraphs-debug.h
@@ -22,7 +22,7 @@
 #define DIGRAPHS_SRC_DIGRAPHS_DEBUG_H_
 
 #include <assert.h>
-#include <src/system.h>
+#include <gap/system.h>
 
 #include "digraphs-config.h"
 
diff --git a/src/digraphs.c b/src/digraphs.c
index d65b61c..f90d9dc 100644
--- a/src/digraphs.c
+++ b/src/digraphs.c
@@ -1586,18 +1586,18 @@ BlissGraph* buildBlissMultiDigraph(Obj digraph) {
   BlissGraph* graph;
 
   n     = DigraphNrVertices(digraph);
-  graph = bliss_digraphs_new(n);
+  graph = bliss_new(n);
 
   adj = OutNeighbours(digraph);
   for (i = 1; i <= n; i++) {
     adji = ELM_PLIST(adj, i);
     nr   = LEN_PLIST(adji);
     for (j = 1; j <= nr; j++) {
-      k = bliss_digraphs_add_vertex(graph, 1);
-      l = bliss_digraphs_add_vertex(graph, 2);
-      bliss_digraphs_add_edge(graph, i - 1, k);
-      bliss_digraphs_add_edge(graph, k, l);
-      bliss_digraphs_add_edge(graph, l, INT_INTOBJ(ELM_PLIST(adji, j)) - 1);
+      k = bliss_add_vertex(graph, 1);
+      l = bliss_add_vertex(graph, 2);
+      bliss_add_edge(graph, i - 1, k);
+      bliss_add_edge(graph, k, l);
+      bliss_add_edge(graph, l, INT_INTOBJ(ELM_PLIST(adji, j)) - 1);
     }
   }
   return graph;
@@ -1612,32 +1612,32 @@ BlissGraph* buildBlissDigraphWithColours(Obj digraph, Obj colours) {
   if (colours) {
     DIGRAPHS_ASSERT(n == (UInt) LEN_LIST(colours));
   }
-  graph = bliss_digraphs_new(0);
+  graph = bliss_new(0);
   adj   = OutNeighbours(digraph);
 
   if (colours) {
     for (i = 1; i <= n; i++) {
-      bliss_digraphs_add_vertex(graph, INT_INTOBJ(ELM_LIST(colours, i)));
+      bliss_add_vertex(graph, INT_INTOBJ(ELM_LIST(colours, i)));
     }
   } else {
     for (i = 1; i <= n; i++) {
-      bliss_digraphs_add_vertex(graph, 1);
+      bliss_add_vertex(graph, 1);
     }
   }
   for (i = 1; i <= n; i++) {
-    bliss_digraphs_add_vertex(graph, n + 1);
+    bliss_add_vertex(graph, n + 1);
   }
   for (i = 1; i <= n; i++) {
-    bliss_digraphs_add_vertex(graph, n + 2);
+    bliss_add_vertex(graph, n + 2);
   }
 
   for (i = 1; i <= n; i++) {
-    bliss_digraphs_add_edge(graph, i - 1, n + i - 1);
-    bliss_digraphs_add_edge(graph, i - 1, 2 * n + i - 1);
+    bliss_add_edge(graph, i - 1, n + i - 1);
+    bliss_add_edge(graph, i - 1, 2 * n + i - 1);
     adji = ELM_PLIST(adj, i);
     nr   = LEN_PLIST(adji);
     for (j = 1; j <= nr; j++) {
-      bliss_digraphs_add_edge(
+      bliss_add_edge(
           graph, n + i - 1, 2 * n + INT_INTOBJ(ELM_PLIST(adji, j)) - 1);
     }
   }
@@ -1652,30 +1652,30 @@ BlissGraph* buildBlissMultiDigraphWithColours(Obj digraph, Obj colours) {
 
   n = DigraphNrVertices(digraph);
   DIGRAPHS_ASSERT(n == (UInt) LEN_LIST(colours));
-  graph = bliss_digraphs_new(0);
+  graph = bliss_new(0);
   adj   = OutNeighbours(digraph);
 
   for (i = 1; i <= n; i++) {
-    bliss_digraphs_add_vertex(graph, INT_INTOBJ(ELM_LIST(colours, i)));
+    bliss_add_vertex(graph, INT_INTOBJ(ELM_LIST(colours, i)));
   }
   for (i = 1; i <= n; i++) {
-    bliss_digraphs_add_vertex(graph, n + 1);
+    bliss_add_vertex(graph, n + 1);
   }
   for (i = 1; i <= n; i++) {
-    bliss_digraphs_add_vertex(graph, n + 2);
+    bliss_add_vertex(graph, n + 2);
   }
 
   for (i = 1; i <= n; i++) {
-    bliss_digraphs_add_edge(graph, i - 1, n + i - 1);
-    bliss_digraphs_add_edge(graph, i - 1, 2 * n + i - 1);
+    bliss_add_edge(graph, i - 1, n + i - 1);
+    bliss_add_edge(graph, i - 1, 2 * n + i - 1);
     adji = ELM_PLIST(adj, i);
     nr   = LEN_PLIST(adji);
     for (j = 1; j <= nr; j++) {
-      k = bliss_digraphs_add_vertex(graph, n + 3);
-      l = bliss_digraphs_add_vertex(graph, n + 4);
-      bliss_digraphs_add_edge(graph, n + i - 1, k);
-      bliss_digraphs_add_edge(graph, k, l);
-      bliss_digraphs_add_edge(
+      k = bliss_add_vertex(graph, n + 3);
+      l = bliss_add_vertex(graph, n + 4);
+      bliss_add_edge(graph, n + i - 1, k);
+      bliss_add_edge(graph, k, l);
+      bliss_add_edge(
           graph, l, 2 * n + INT_INTOBJ(ELM_PLIST(adji, j)) - 1);
     }
   }
@@ -1724,7 +1724,7 @@ static Obj FuncDIGRAPH_AUTOMORPHISMS(Obj self, Obj digraph, Obj colours) {
   SET_ELM_PLIST(autos, 2, n);
   SET_LEN_PLIST(autos, 2);
 
-  canon = bliss_digraphs_find_canonical_labeling(
+  canon = bliss_find_canonical_labeling(
       graph, digraph_hook_function, autos, 0);
 
   p   = NEW_PERM4(INT_INTOBJ(n));
@@ -1735,7 +1735,7 @@ static Obj FuncDIGRAPH_AUTOMORPHISMS(Obj self, Obj digraph, Obj colours) {
   }
   SET_ELM_PLIST(autos, 2, p);
 
-  bliss_digraphs_release(graph);
+  bliss_release(graph);
   if (LEN_PLIST(ELM_PLIST(autos, 1)) != 0) {
     SortDensePlist(ELM_PLIST(autos, 1));
     RemoveDupsDensePlist(ELM_PLIST(autos, 1));
@@ -1843,10 +1843,10 @@ static Obj FuncMULTIDIGRAPH_AUTOMORPHISMS(Obj self, Obj digraph, Obj colours) {
   CHANGED_BAG(autos);
 
   if (colours == False) {
-    canon = bliss_digraphs_find_canonical_labeling(
+    canon = bliss_find_canonical_labeling(
         graph, multidigraph_hook_function, autos, 0);
   } else {
-    canon = bliss_digraphs_find_canonical_labeling(
+    canon = bliss_find_canonical_labeling(
         graph, multidigraph_colours_hook_function, autos, 0);
   }
 
@@ -1873,7 +1873,7 @@ static Obj FuncMULTIDIGRAPH_AUTOMORPHISMS(Obj self, Obj digraph, Obj colours) {
     }
   }
 
-  bliss_digraphs_release(graph);
+  bliss_release(graph);
 
   // put the canonical labeling (as a list of two perms) into autos[2]
   out = NEW_PLIST(T_PLIST, 2);
@@ -1914,7 +1914,7 @@ static Obj FuncDIGRAPH_CANONICAL_LABELLING(Obj self, Obj digraph, Obj colours) {
     graph = buildBlissDigraphWithColours(digraph, colours);
   }
 
-  canon = bliss_digraphs_find_canonical_labeling(graph, 0, 0, 0);
+  canon = bliss_find_canonical_labeling(graph, 0, 0, 0);
 
   n   = DigraphNrVertices(digraph);
   p   = NEW_PERM4(n);
@@ -1923,7 +1923,7 @@ static Obj FuncDIGRAPH_CANONICAL_LABELLING(Obj self, Obj digraph, Obj colours) {
   for (i = 0; i < n; i++) {
     ptr[i] = canon[i];
   }
-  bliss_digraphs_release(graph);
+  bliss_release(graph);
 
   return p;
 }
@@ -1942,7 +1942,7 @@ FuncMULTIDIGRAPH_CANONICAL_LABELLING(Obj self, Obj digraph, Obj colours) {
     graph = buildBlissMultiDigraphWithColours(digraph, colours);
   }
 
-  canon = bliss_digraphs_find_canonical_labeling(graph, 0, 0, 0);
+  canon = bliss_find_canonical_labeling(graph, 0, 0, 0);
 
   m   = DigraphNrVertices(digraph);
   p   = NEW_PERM4(m);  // perm of vertices
@@ -1966,7 +1966,7 @@ FuncMULTIDIGRAPH_CANONICAL_LABELLING(Obj self, Obj digraph, Obj colours) {
     }
   }
 
-  bliss_digraphs_release(graph);
+  bliss_release(graph);
 
   out = NEW_PLIST(T_PLIST, 2);
   SET_ELM_PLIST(out, 1, p);
diff --git a/src/digraphs.h b/src/digraphs.h
index 4921e4d..75764f3 100644
--- a/src/digraphs.h
+++ b/src/digraphs.h
@@ -19,10 +19,10 @@
 #include <stdbool.h>
 #include <stdlib.h>
 
-#include "bliss-0.73/bliss_C.h"
+#include "bliss/bliss_C.h"
 
-#include "src/compiled.h" /* GAP headers                */
-#include "src/homos.h"
+#include "gap/compiled.h" /* GAP headers                */
+#include "homos.h"
 
 Int DigraphNrVertices(Obj digraph);
 Int DigraphNrEdges(Obj digraph);
diff --git a/src/homos.c b/src/homos.c
index 0aeeb25..ded4332 100644
--- a/src/homos.c
+++ b/src/homos.c
@@ -596,49 +596,49 @@ inline static bool is_adjacent_digraph(Digraph* digraph, Vertex i, Vertex j) {
 }
 
 ////////////////////////////////////////////////////////////////////////////////
-// new_bliss_digraphs_graph: get a new bliss (undirected, vertex coloured)
+// new_bliss_graph: get a new bliss (undirected, vertex coloured)
 // digraph from
 // the Digraph pointed to by <digraph>.
 ////////////////////////////////////////////////////////////////////////////////
 
-static BlissGraph* new_bliss_digraphs_graph_from_digraph(Digraph* digraph,
+static BlissGraph* new_bliss_graph_from_digraph(Digraph* digraph,
                                                          UIntS*   colors) {
   DIGRAPHS_ASSERT(digraph != NULL);
 
   UIntS       i, j, k, l;
-  BlissGraph* bliss_digraphs_graph;
+  BlissGraph* bliss_graph;
   UIntS       n = digraph->nr_vertices;
 
   if (colors == NULL) {
-    bliss_digraphs_graph = bliss_digraphs_new(n);
+    bliss_graph = bliss_new(n);
   } else {
-    bliss_digraphs_graph = bliss_digraphs_new(0);
+    bliss_graph = bliss_new(0);
     for (i = 0; i < n; i++) {
-      bliss_digraphs_add_vertex(bliss_digraphs_graph, colors[i]);
+      bliss_add_vertex(bliss_graph, colors[i]);
     }
   }
 
   for (i = 0; i < n; i++) {  // loop over vertices
     for (j = 0; j < n; j++) {
       if (is_adjacent_digraph(digraph, i, j)) {
-        k = bliss_digraphs_add_vertex(bliss_digraphs_graph, n + 1);
-        l = bliss_digraphs_add_vertex(bliss_digraphs_graph, n + 2);
-        bliss_digraphs_add_edge(bliss_digraphs_graph, i, k);
-        bliss_digraphs_add_edge(bliss_digraphs_graph, k, l);
-        bliss_digraphs_add_edge(bliss_digraphs_graph, l, j);
+        k = bliss_add_vertex(bliss_graph, n + 1);
+        l = bliss_add_vertex(bliss_graph, n + 2);
+        bliss_add_edge(bliss_graph, i, k);
+        bliss_add_edge(bliss_graph, k, l);
+        bliss_add_edge(bliss_graph, l, j);
       }
     }
   }
-  return bliss_digraphs_graph;
+  return bliss_graph;
 }
 
 ////////////////////////////////////////////////////////////////////////////////
-// bliss_digraphs_hook_digraph: the hook function for
-// bliss_digraphs_find_automorphisms to
+// bliss_hook_digraph: the hook function for
+// bliss_find_automorphisms to
 // collect the generators of the automorphism group in a PermColl
 ////////////////////////////////////////////////////////////////////////////////
 
-static void bliss_digraphs_hook_digraph(void* user_param_arg,  // perm_coll!
+static void bliss_hook_digraph(void* user_param_arg,  // perm_coll!
                                         unsigned int        N,
                                         const unsigned int* aut) {
   UIntS i;
@@ -663,12 +663,12 @@ static void bliss_digraphs_hook_digraph(void* user_param_arg,  // perm_coll!
 static PermColl* automorphisms_digraph(Digraph* digraph, UIntS* colors) {
   DIGRAPHS_ASSERT(digraph != NULL);
 
-  BlissGraph* bliss_digraphs_graph =
-      new_bliss_digraphs_graph_from_digraph(digraph, colors);
+  BlissGraph* bliss_graph =
+      new_bliss_graph_from_digraph(digraph, colors);
   PermColl* gens = new_perm_coll(digraph->nr_vertices - 1);
-  bliss_digraphs_find_automorphisms(
-      bliss_digraphs_graph, bliss_digraphs_hook_digraph, gens, 0);
-  bliss_digraphs_release(bliss_digraphs_graph);
+  bliss_find_automorphisms(
+      bliss_graph, bliss_hook_digraph, gens, 0);
+  bliss_release(bliss_graph);
   return gens;
 }
 
@@ -1260,43 +1260,43 @@ inline static bool is_adjacent_graph(Graph* graph, Vertex i, Vertex j) {
 }
 
 ////////////////////////////////////////////////////////////////////////////////
-// new_bliss_digraphs_graph_from_graph: get a new Bliss graph from the Graph
+// new_bliss_graph_from_graph: get a new Bliss graph from the Graph
 // pointed to
 // by <graph>.
 ////////////////////////////////////////////////////////////////////////////////
 
-static BlissGraph* new_bliss_digraphs_graph_from_graph(Graph* graph,
+static BlissGraph* new_bliss_graph_from_graph(Graph* graph,
                                                        UIntS* colors) {
   DIGRAPHS_ASSERT(graph != NULL);
 
   UIntS       i, j;
-  BlissGraph* bliss_digraphs_graph;
+  BlissGraph* bliss_graph;
   UIntS       n = graph->nr_vertices;
 
   if (colors == NULL) {
-    bliss_digraphs_graph = bliss_digraphs_new(n);
+    bliss_graph = bliss_new(n);
   } else {
-    bliss_digraphs_graph = bliss_digraphs_new(0);
+    bliss_graph = bliss_new(0);
     for (i = 0; i < n; i++) {
-      bliss_digraphs_add_vertex(bliss_digraphs_graph, colors[i]);
+      bliss_add_vertex(bliss_graph, colors[i]);
     }
   }
 
   for (i = 0; i < n; i++) {  // loop over vertices
     for (j = 0; j < n; j++) {
       if (is_adjacent_graph(graph, i, j)) {
-        bliss_digraphs_add_edge(bliss_digraphs_graph, i, j);
+        bliss_add_edge(bliss_graph, i, j);
       }
     }
   }
-  return bliss_digraphs_graph;
+  return bliss_graph;
 }
 
 ////////////////////////////////////////////////////////////////////////////////
-// bliss_digraphs_hook_graph: the HOOK for bliss_digraphs_find_automorphism.
+// bliss_hook_graph: the HOOK for bliss_find_automorphism.
 ////////////////////////////////////////////////////////////////////////////////
 
-static void bliss_digraphs_hook_graph(void* user_param_arg,  // perm_coll!
+static void bliss_hook_graph(void* user_param_arg,  // perm_coll!
                                       unsigned int        N,
                                       const unsigned int* aut) {
   DIGRAPHS_ASSERT(N <= deg);
@@ -1321,12 +1321,12 @@ static void bliss_digraphs_hook_graph(void* user_param_arg,  // perm_coll!
 static PermColl* automorphisms_graph(Graph* graph, UIntS* colors) {
   DIGRAPHS_ASSERT(graph != NULL);
 
-  BlissGraph* bliss_digraphs_graph =
-      new_bliss_digraphs_graph_from_graph(graph, colors);
+  BlissGraph* bliss_graph =
+      new_bliss_graph_from_graph(graph, colors);
   PermColl* gens = new_perm_coll(graph->nr_vertices - 1);
-  bliss_digraphs_find_automorphisms(
-      bliss_digraphs_graph, bliss_digraphs_hook_graph, gens, 0);
-  bliss_digraphs_release(bliss_digraphs_graph);
+  bliss_find_automorphisms(
+      bliss_graph, bliss_hook_graph, gens, 0);
+  bliss_release(bliss_graph);
   return gens;
 }
 
diff --git a/src/homos.h b/src/homos.h
index 3ca7366..e4e5c85 100644
--- a/src/homos.h
+++ b/src/homos.h
@@ -16,7 +16,7 @@
 #include <setjmp.h>
 #include <x86intrin.h>
 
-#include "bliss-0.73/bliss_C.h"
+#include "bliss/bliss_C.h"
 #include "src/schreier-sims.h"
 
 void          homo_hook_print();
