diff --git a/Makefile.am b/Makefile.am
index 8d777f4..d405e5b 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -7,11 +7,6 @@
 
 ACLOCAL_AMFLAGS = -I m4
 
-SUBDIRS = @PLANARITY_SUITE_DIR@
-
-PLANAR_INCLUDE   = -I$(top_srcdir)/@PLANARITY_SUITE_DIR@/
-DIGRAPHS_INCLUDE = -I$(top_srcdir)/extern/
-
 BINARCHDIR = bin/$(GAPARCH)
 GAPINSTALLLIB = $(abs_top_srcdir)/$(BINARCHDIR)/
 
@@ -26,18 +21,6 @@ pkginclude_HEADERS += src/homos.h
 pkginclude_HEADERS += src/perms.h
 pkginclude_HEADERS += src/planar.h
 pkginclude_HEADERS += src/schreier-sims.h
-pkginclude_HEADERS += extern/bliss-0.73/bignum.hh
-pkginclude_HEADERS += extern/bliss-0.73/bliss_C.h
-pkginclude_HEADERS += extern/bliss-0.73/defs.hh
-pkginclude_HEADERS += extern/bliss-0.73/graph.hh
-pkginclude_HEADERS += extern/bliss-0.73/heap.hh
-pkginclude_HEADERS += extern/bliss-0.73/kqueue.hh
-pkginclude_HEADERS += extern/bliss-0.73/kstack.hh
-pkginclude_HEADERS += extern/bliss-0.73/orbit.hh
-pkginclude_HEADERS += extern/bliss-0.73/partition.hh
-pkginclude_HEADERS += extern/bliss-0.73/timer.hh
-pkginclude_HEADERS += extern/bliss-0.73/uintseqhash.hh
-pkginclude_HEADERS += extern/bliss-0.73/utils.hh
 
 digraphs_la_SOURCES =  src/digraphs.c
 digraphs_la_SOURCES += src/bitarray.c
@@ -47,38 +30,25 @@ digraphs_la_SOURCES += src/homos-graphs.c
 digraphs_la_SOURCES += src/perms.c
 digraphs_la_SOURCES += src/planar.c
 digraphs_la_SOURCES += src/schreier-sims.c
-digraphs_la_SOURCES += extern/bliss-0.73/defs.cc
-digraphs_la_SOURCES += extern/bliss-0.73/graph.cc
-digraphs_la_SOURCES += extern/bliss-0.73/partition.cc
-digraphs_la_SOURCES += extern/bliss-0.73/orbit.cc
-digraphs_la_SOURCES += extern/bliss-0.73/uintseqhash.cc
-digraphs_la_SOURCES += extern/bliss-0.73/heap.cc
-digraphs_la_SOURCES += extern/bliss-0.73/timer.cc
-digraphs_la_SOURCES += extern/bliss-0.73/utils.cc
-digraphs_la_SOURCES += extern/bliss-0.73/bliss_C.cc
 
 digraphs_la_CPPFLAGS =  $(GAP_CPPFLAGS)
 digraphs_la_CPPFLAGS += $(CODE_COVERAGE_CPPFLAGS)
 
 digraphs_la_CXXFLAGS =  -O3 -march=native -mpopcnt
-digraphs_la_CXXFLAGS += $(PLANAR_INCLUDE) $(DIGRAPHS_INCLUDE) 
 digraphs_la_CXXFLAGS += $(CODE_COVERAGE_CXXFLAGS)
 
 digraphs_la_CFLAGS   =  -O3 -march=native -mpopcnt
-digraphs_la_CFLAGS   += $(GAP_CFLAGS) $(PLANAR_INCLUDE) $(DIGRAPHS_INCLUDE)
+digraphs_la_CFLAGS   += $(GAP_CFLAGS)
 digraphs_la_CFLAGS   += $(CODE_COVERAGE_CFLAGS)
 
 digraphs_la_LDFLAGS  =  $(GAP_LDFLAGS) -module -avoid-version
 
-digraphs_la_LIBADD = @PLANARITY_SUITE_DIR@/libplanarity.la
-
 if SYS_IS_CYGWIN
 digraphs_la_LDFLAGS += -no-undefined -version-info 0:0:0 -Wl,$(GAPROOT)/bin/$(GAPARCH)/gap.dll
 endif
 
 all-local: digraphs.la
-	$(mkdir_p) $(top_srcdir)/$(BINARCHDIR) $(top_srcdir)/bin/lib
-	cp -RL @PLANARITY_SUITE_DIR@/.libs/*  $(top_srcdir)/bin/lib/
+	$(mkdir_p) $(top_srcdir)/$(BINARCHDIR)
 if SYS_IS_CYGWIN
 	cp .libs/digraphs.dll $(GAPINSTALLLIB)
 else
diff --git a/configure.ac b/configure.ac
index 1c6b455..510ff2f 100644
--- a/configure.ac
+++ b/configure.ac
@@ -14,10 +14,6 @@ AC_CONFIG_SRCDIR([src/digraphs.c])
 AC_CONFIG_HEADER([src/_pkgconfig.h:cnf/pkgconfig.h.in])
 AC_CONFIG_MACRO_DIR([m4])
 AC_CONFIG_AUX_DIR([cnf])
-AC_CONFIG_SUBDIRS([extern/edge-addition-planarity-suite-Version_3.0.0.5])
-
-PLANARITY_SUITE_DIR=extern/edge-addition-planarity-suite-Version_3.0.0.5
-AC_SUBST(PLANARITY_SUITE_DIR)
 
 dnl ##
 dnl ## Get canonical host info
diff --git a/src/bitarray.c b/src/bitarray.c
index b0b8250..10307da 100644
--- a/src/bitarray.c
+++ b/src/bitarray.c
@@ -14,7 +14,7 @@
 #include <stdlib.h>  // for free, calloc, malloc
 
 // GAP headers
-#include "src/compiled.h"  // for Obj, ELM_LIST, ISB_LIST, Fail
+#include "gap/compiled.h"  // for Obj, ELM_LIST, ISB_LIST, Fail
 
 // Digraphs headers
 #include "digraphs-debug.h"  // for DIGRAPHS_ASSERT
diff --git a/src/bitarray.h b/src/bitarray.h
index 6503e10..48fef89 100644
--- a/src/bitarray.h
+++ b/src/bitarray.h
@@ -18,7 +18,7 @@
 #include <stdint.h>   // for uint16_t
 
 // GAP headers
-#include "src/compiled.h"  // for COUNT_TRUES_BLOCK, Obj, . . .
+#include "gap/compiled.h"  // for COUNT_TRUES_BLOCK, Obj, . . .
 
 // Digraphs headers
 #include "digraphs-debug.h"  // for DIGRAPHS_ASSERT
diff --git a/src/digraphs.c b/src/digraphs.c
index bc97116..b8f6aa5 100644
--- a/src/digraphs.c
+++ b/src/digraphs.c
@@ -17,7 +17,7 @@
 #include <stdbool.h>  // for false, true, bool
 #include <stdlib.h>   // for NULL, free
 
-#include "bliss-0.73/bliss_C.h"  // for bliss_digraphs_release, . . .
+#include "bliss/bliss_C.h"  // for bliss_release, . . .
 
 #include "digraphs-debug.h"  // for DIGRAPHS_ASSERT
 #include "homos.h"           // for FuncHomomorphismDigraphsFinder
@@ -1573,18 +1573,18 @@ BlissGraph* buildBlissMultiDigraph(Obj digraph) {
   BlissGraph* graph;
 
   n     = DigraphNrVertices(digraph);
-  graph = bliss_digraphs_new(n);
+  graph = bliss_new(n);
 
   adj = OutNeighbours(digraph);
   for (i = 1; i <= n; i++) {
     adji = ELM_PLIST(adj, i);
     nr   = LEN_PLIST(adji);
     for (j = 1; j <= nr; j++) {
-      k = bliss_digraphs_add_vertex(graph, 1);
-      l = bliss_digraphs_add_vertex(graph, 2);
-      bliss_digraphs_add_edge(graph, i - 1, k);
-      bliss_digraphs_add_edge(graph, k, l);
-      bliss_digraphs_add_edge(graph, l, INT_INTOBJ(ELM_PLIST(adji, j)) - 1);
+      k = bliss_add_vertex(graph, 1);
+      l = bliss_add_vertex(graph, 2);
+      bliss_add_edge(graph, i - 1, k);
+      bliss_add_edge(graph, k, l);
+      bliss_add_edge(graph, l, INT_INTOBJ(ELM_PLIST(adji, j)) - 1);
     }
   }
   return graph;
@@ -1599,32 +1599,32 @@ BlissGraph* buildBlissDigraphWithColours(Obj digraph, Obj colours) {
   if (colours) {
     DIGRAPHS_ASSERT(n == (UInt) LEN_LIST(colours));
   }
-  graph = bliss_digraphs_new(0);
+  graph = bliss_new(0);
   adj   = OutNeighbours(digraph);
 
   if (colours) {
     for (i = 1; i <= n; i++) {
-      bliss_digraphs_add_vertex(graph, INT_INTOBJ(ELM_LIST(colours, i)));
+      bliss_add_vertex(graph, INT_INTOBJ(ELM_LIST(colours, i)));
     }
   } else {
     for (i = 1; i <= n; i++) {
-      bliss_digraphs_add_vertex(graph, 1);
+      bliss_add_vertex(graph, 1);
     }
   }
   for (i = 1; i <= n; i++) {
-    bliss_digraphs_add_vertex(graph, n + 1);
+    bliss_add_vertex(graph, n + 1);
   }
   for (i = 1; i <= n; i++) {
-    bliss_digraphs_add_vertex(graph, n + 2);
+    bliss_add_vertex(graph, n + 2);
   }
 
   for (i = 1; i <= n; i++) {
-    bliss_digraphs_add_edge(graph, i - 1, n + i - 1);
-    bliss_digraphs_add_edge(graph, i - 1, 2 * n + i - 1);
+    bliss_add_edge(graph, i - 1, n + i - 1);
+    bliss_add_edge(graph, i - 1, 2 * n + i - 1);
     adji = ELM_PLIST(adj, i);
     nr   = LEN_PLIST(adji);
     for (j = 1; j <= nr; j++) {
-      bliss_digraphs_add_edge(
+      bliss_add_edge(
           graph, n + i - 1, 2 * n + INT_INTOBJ(ELM_PLIST(adji, j)) - 1);
     }
   }
@@ -1639,30 +1639,30 @@ BlissGraph* buildBlissMultiDigraphWithColours(Obj digraph, Obj colours) {
 
   n = DigraphNrVertices(digraph);
   DIGRAPHS_ASSERT(n == (UInt) LEN_LIST(colours));
-  graph = bliss_digraphs_new(0);
+  graph = bliss_new(0);
   adj   = OutNeighbours(digraph);
 
   for (i = 1; i <= n; i++) {
-    bliss_digraphs_add_vertex(graph, INT_INTOBJ(ELM_LIST(colours, i)));
+    bliss_add_vertex(graph, INT_INTOBJ(ELM_LIST(colours, i)));
   }
   for (i = 1; i <= n; i++) {
-    bliss_digraphs_add_vertex(graph, n + 1);
+    bliss_add_vertex(graph, n + 1);
   }
   for (i = 1; i <= n; i++) {
-    bliss_digraphs_add_vertex(graph, n + 2);
+    bliss_add_vertex(graph, n + 2);
   }
 
   for (i = 1; i <= n; i++) {
-    bliss_digraphs_add_edge(graph, i - 1, n + i - 1);
-    bliss_digraphs_add_edge(graph, i - 1, 2 * n + i - 1);
+    bliss_add_edge(graph, i - 1, n + i - 1);
+    bliss_add_edge(graph, i - 1, 2 * n + i - 1);
     adji = ELM_PLIST(adj, i);
     nr   = LEN_PLIST(adji);
     for (j = 1; j <= nr; j++) {
-      k = bliss_digraphs_add_vertex(graph, n + 3);
-      l = bliss_digraphs_add_vertex(graph, n + 4);
-      bliss_digraphs_add_edge(graph, n + i - 1, k);
-      bliss_digraphs_add_edge(graph, k, l);
-      bliss_digraphs_add_edge(
+      k = bliss_add_vertex(graph, n + 3);
+      l = bliss_add_vertex(graph, n + 4);
+      bliss_add_edge(graph, n + i - 1, k);
+      bliss_add_edge(graph, k, l);
+      bliss_add_edge(
           graph, l, 2 * n + INT_INTOBJ(ELM_PLIST(adji, j)) - 1);
     }
   }
@@ -1711,7 +1711,7 @@ static Obj FuncDIGRAPH_AUTOMORPHISMS(Obj self, Obj digraph, Obj colours) {
   SET_ELM_PLIST(autos, 2, n);
   SET_LEN_PLIST(autos, 2);
 
-  canon = bliss_digraphs_find_canonical_labeling(
+  canon = bliss_find_canonical_labeling(
       graph, digraph_hook_function, autos, 0);
 
   p   = NEW_PERM4(INT_INTOBJ(n));
@@ -1723,7 +1723,7 @@ static Obj FuncDIGRAPH_AUTOMORPHISMS(Obj self, Obj digraph, Obj colours) {
   SET_ELM_PLIST(autos, 2, p);
   CHANGED_BAG(autos);
 
-  bliss_digraphs_release(graph);
+  bliss_release(graph);
   if (LEN_PLIST(ELM_PLIST(autos, 1)) != 0) {
     SortDensePlist(ELM_PLIST(autos, 1));
     RemoveDupsDensePlist(ELM_PLIST(autos, 1));
@@ -1833,10 +1833,10 @@ static Obj FuncMULTIDIGRAPH_AUTOMORPHISMS(Obj self, Obj digraph, Obj colours) {
   SET_ELM_PLIST(autos, 4, INTOBJ_INT(DigraphNrEdges(digraph)));
 
   if (colours == False) {
-    canon = bliss_digraphs_find_canonical_labeling(
+    canon = bliss_find_canonical_labeling(
         graph, multidigraph_hook_function, autos, 0);
   } else {
-    canon = bliss_digraphs_find_canonical_labeling(
+    canon = bliss_find_canonical_labeling(
         graph, multidigraph_colours_hook_function, autos, 0);
   }
 
@@ -1863,7 +1863,7 @@ static Obj FuncMULTIDIGRAPH_AUTOMORPHISMS(Obj self, Obj digraph, Obj colours) {
     }
   }
 
-  bliss_digraphs_release(graph);
+  bliss_release(graph);
 
   // put the canonical labeling (as a list of two perms) into autos[2]
   out = NEW_PLIST(T_PLIST, 2);
@@ -1902,7 +1902,7 @@ static Obj FuncDIGRAPH_CANONICAL_LABELLING(Obj self, Obj digraph, Obj colours) {
     graph = buildBlissDigraphWithColours(digraph, colours);
   }
 
-  canon = bliss_digraphs_find_canonical_labeling(graph, 0, 0, 0);
+  canon = bliss_find_canonical_labeling(graph, 0, 0, 0);
 
   n   = DigraphNrVertices(digraph);
   p   = NEW_PERM4(n);
@@ -1911,7 +1911,7 @@ static Obj FuncDIGRAPH_CANONICAL_LABELLING(Obj self, Obj digraph, Obj colours) {
   for (i = 0; i < n; i++) {
     ptr[i] = canon[i];
   }
-  bliss_digraphs_release(graph);
+  bliss_release(graph);
 
   return p;
 }
@@ -1930,7 +1930,7 @@ FuncMULTIDIGRAPH_CANONICAL_LABELLING(Obj self, Obj digraph, Obj colours) {
     graph = buildBlissMultiDigraphWithColours(digraph, colours);
   }
 
-  canon = bliss_digraphs_find_canonical_labeling(graph, 0, 0, 0);
+  canon = bliss_find_canonical_labeling(graph, 0, 0, 0);
 
   m   = DigraphNrVertices(digraph);
   p   = NEW_PERM4(m);  // perm of vertices
@@ -1954,7 +1954,7 @@ FuncMULTIDIGRAPH_CANONICAL_LABELLING(Obj self, Obj digraph, Obj colours) {
     }
   }
 
-  bliss_digraphs_release(graph);
+  bliss_release(graph);
 
   out = NEW_PLIST(T_PLIST, 2);
   SET_ELM_PLIST(out, 1, p);
diff --git a/src/digraphs.h b/src/digraphs.h
index 753a8e7..d66d89e 100644
--- a/src/digraphs.h
+++ b/src/digraphs.h
@@ -16,7 +16,7 @@
 #define DIGRAPHS_SRC_DIGRAPHS_H_
 
 // GAP headers
-#include "src/compiled.h"  // for Obj, Int
+#include "gap/compiled.h"  // for Obj, Int
 
 Int DigraphNrVertices(Obj digraph);
 Int DigraphNrEdges(Obj digraph);
diff --git a/src/homos-graphs.c b/src/homos-graphs.c
index 22ed31f..acfa071 100644
--- a/src/homos-graphs.c
+++ b/src/homos-graphs.c
@@ -14,10 +14,10 @@
 #include <stdlib.h>  // for free, malloc, NULL
 
 // Bliss headers
-#include "bliss-0.73/bliss_C.h"  // for BlissGraph, . . .
+#include "bliss/bliss_C.h"  // for BlissGraph, . . .
 
 // GAP headers
-#include "src/compiled.h"  // for Obj, Int
+#include "gap/compiled.h"  // for Obj, Int
 
 // Digraphs headers
 #include "digraphs-debug.h"  // for DIGRAPHS_ASSERT
@@ -122,18 +122,18 @@ static BlissGraph* new_bliss_graph_from_digraph(Digraph const* const  digraph,
   DIGRAPHS_ASSERT(colors != NULL);
   BlissGraph*    bg;
   uint16_t const n = digraph->nr_vertices;
-  bg               = bliss_digraphs_new(0);
+  bg               = bliss_new(0);
   for (uint16_t i = 0; i < n; i++) {
-    bliss_digraphs_add_vertex(bg, colors[i]);
+    bliss_add_vertex(bg, colors[i]);
   }
   for (uint16_t i = 0; i < n; i++) {
     for (uint16_t j = 0; j < n; j++) {
       if (is_adjacent_digraph(digraph, i, j)) {
-        uint16_t k = bliss_digraphs_add_vertex(bg, n + 1);
-        uint16_t l = bliss_digraphs_add_vertex(bg, n + 2);
-        bliss_digraphs_add_edge(bg, i, k);
-        bliss_digraphs_add_edge(bg, k, l);
-        bliss_digraphs_add_edge(bg, l, j);
+        uint16_t k = bliss_add_vertex(bg, n + 1);
+        uint16_t l = bliss_add_vertex(bg, n + 2);
+        bliss_add_edge(bg, i, k);
+        bliss_add_edge(bg, k, l);
+        bliss_add_edge(bg, l, j);
       }
     }
   }
@@ -146,14 +146,14 @@ static BlissGraph* new_bliss_graph_from_graph(Graph const* const    graph,
   DIGRAPHS_ASSERT(colors != NULL);
   BlissGraph*    bg;
   uint16_t const n = graph->nr_vertices;
-  bg               = bliss_digraphs_new(0);
+  bg               = bliss_new(0);
   for (uint16_t i = 0; i < n; i++) {
-    bliss_digraphs_add_vertex(bg, colors[i]);
+    bliss_add_vertex(bg, colors[i]);
   }
   for (uint16_t i = 0; i < n; i++) {
     for (uint16_t j = 0; j < n; j++) {
       if (is_adjacent_graph(graph, i, j)) {
-        bliss_digraphs_add_edge(bg, i, j);
+        bliss_add_edge(bg, i, j);
       }
     }
   }
@@ -182,8 +182,8 @@ void automorphisms_digraph(Digraph const* const  digraph,
   clear_perm_coll(out);
   out->degree    = PERM_DEGREE;
   BlissGraph* bg = new_bliss_graph_from_digraph(digraph, colors);
-  bliss_digraphs_find_automorphisms(bg, bliss_hook, out, 0);
-  bliss_digraphs_release(bg);
+  bliss_find_automorphisms(bg, bliss_hook, out, 0);
+  bliss_release(bg);
 }
 
 void automorphisms_graph(Graph const* const    graph,
@@ -194,6 +194,6 @@ void automorphisms_graph(Graph const* const    graph,
   clear_perm_coll(out);
   out->degree    = PERM_DEGREE;
   BlissGraph* bg = new_bliss_graph_from_graph(graph, colors);
-  bliss_digraphs_find_automorphisms(bg, bliss_hook, out, 0);
-  bliss_digraphs_release(bg);
+  bliss_find_automorphisms(bg, bliss_hook, out, 0);
+  bliss_release(bg);
 }
diff --git a/src/homos.c b/src/homos.c
index 7773a8f..c45e0b2 100644
--- a/src/homos.c
+++ b/src/homos.c
@@ -36,7 +36,7 @@
 #include <time.h>     // for time
 
 // GAP headers
-#include "src/compiled.h"
+#include "gap/compiled.h"
 
 // Digraphs package headers
 #include "bitarray.h"         // for BitArray
diff --git a/src/homos.h b/src/homos.h
index ae3d440..f66d9a4 100644
--- a/src/homos.h
+++ b/src/homos.h
@@ -13,7 +13,7 @@
 #define DIGRAPHS_SRC_HOMOS_H_
 
 // GAP headers
-#include "src/compiled.h"
+#include "gap/compiled.h"
 
 Obj FuncHomomorphismDigraphsFinder(Obj self, Obj args);
 
diff --git a/src/planar.c b/src/planar.c
index 9d8c8b5..e18a5c0 100644
--- a/src/planar.c
+++ b/src/planar.c
@@ -20,10 +20,10 @@
 #include "digraphs.h"        // for DigraphNrVertices, DigraphNrEdges, . . .
 
 // edge-addition-planarity-suite headers
-#include "c/graph.h"
-#include "c/graphK23Search.h"
-#include "c/graphK33Search.h"
-#include "c/graphK4Search.h"
+#include "planarity/graph.h"
+#include "planarity/graphK23Search.h"
+#include "planarity/graphK33Search.h"
+#include "planarity/graphK4Search.h"
 
 #if !defined(GAP_KERNEL_MAJOR_VERSION) || GAP_KERNEL_MAJOR_VERSION < 3
 // compatibility with GAP <= 4.9
diff --git a/src/planar.h b/src/planar.h
index d64960c..48f1497 100644
--- a/src/planar.h
+++ b/src/planar.h
@@ -13,7 +13,7 @@
 #define DIGRAPHS_SRC_PLANAR_H_
 
 // GAP headers
-#include "src/compiled.h"
+#include "gap/compiled.h"
 
 Obj FuncIS_PLANAR(Obj self, Obj digraph);
 Obj FuncKURATOWSKI_PLANAR_SUBGRAPH(Obj self, Obj digraph);
diff --git a/src/conditions.h b/src/conditions.h
index b4e1c4d..9166b48 100644
--- a/src/conditions.h
+++ b/src/conditions.h
@@ -17,7 +17,7 @@
 #include <string.h>   // for NULL, memcpy, size_t
 
 // GAP headers
-#include "src/system.h"  // for ALWAYS_INLINE
+#include "gap/system.h"  // for ALWAYS_INLINE
 
 // Digraphs headers
 #include "bitarray.h"        // for BitArray, intersect_bit_arrays, size_b...
