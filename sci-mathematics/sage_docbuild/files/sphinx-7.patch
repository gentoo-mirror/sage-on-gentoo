From 7f54e9d7861b56bbdec41e6f4689a93c50d6c51a Mon Sep 17 00:00:00 2001
From: Antonio Rojas <arojas@archlinux.org>
Date: Sun, 21 May 2023 13:45:26 +0200
Subject: [PATCH 1/6] Fix build with sphinx 7

Replace or remove use of deprecated stuff
---
 src/sage_docbuild/conf.py             |  2 +-
 src/sage_docbuild/ext/sage_autodoc.py | 62 ++++++---------------------
 2 files changed, 14 insertions(+), 50 deletions(-)

diff --git a/sage_docbuild/conf.py b/sage_docbuild/conf.py
index 740a37cf86f..e2355012f00 100644
--- a/sage_docbuild/conf.py
+++ b/sage_docbuild/conf.py
@@ -248,7 +248,7 @@ def set_intersphinx_mappings(app, config):
         if os.path.isdir(os.path.join(invpath, directory)):
             src = os.path.join(refpath, directory)
             dst = os.path.join(invpath, directory, 'objects.inv')
-            app.config.intersphinx_mapping[src] = dst
+            app.config.intersphinx_mapping[directory] = (src, dst)
 
     intersphinx.normalize_intersphinx_mapping(app, config)
 
diff --git a/sage_docbuild/ext/sage_autodoc.py b/sage_docbuild/ext/sage_autodoc.py
index 14e272d992d..a6253d508fd 100644
--- a/sage_docbuild/ext/sage_autodoc.py
+++ b/sage_docbuild/ext/sage_autodoc.py
@@ -44,7 +44,6 @@
 import sphinx
 from sphinx.application import Sphinx
 from sphinx.config import ENUM, Config
-from sphinx.deprecation import RemovedInSphinx60Warning
 from sphinx.environment import BuildEnvironment
 from sphinx.ext.autodoc.importer import (get_class_members, get_object_members, import_module,
                                          import_object)
@@ -56,8 +55,11 @@
 from sphinx.util.inspect import (evaluate_signature, getdoc, object_description, safe_getattr,
                                  stringify_signature)
 from sphinx.util.typing import OptionSpec, get_type_hints, restify
-from sphinx.util.typing import stringify as stringify_typehint
-
+try:
+    from sphinx.util.typing import stringify_annotation
+except ImportError:
+    from sphinx.util.typing import stringify as stringify_annotation
+    
 # ------------------------------------------------------------------
 from sage.misc.sageinspect import (sage_getdoc_original,
                                    sage_getargspec, isclassinstance,
@@ -645,34 +647,6 @@ def add_content(self, more_content: Optional[StringList]) -> None:
             for line, src in zip(more_content.data, more_content.items):
                 self.add_line(line, src[0], src[1])
 
-    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:
-        """Return ``(members_check_module, members)`` where ``members`` is a
-        list of ``(membername, member)`` pairs of the members of *self.object*.
-
-        If *want_all* is True, return all members.  Else, only return those
-        members given by *self.options.members* (which may also be None).
-        """
-        warnings.warn('The implementation of Documenter.get_object_members() will be '
-                      'removed from Sphinx-6.0.', RemovedInSphinx60Warning)
-        members = get_object_members(self.object, self.objpath, self.get_attr, self.analyzer)
-        if not want_all:
-            if not self.options.members:
-                return False, []  # type: ignore
-            # specific members given
-            selected = []
-            for name in self.options.members:
-                if name in members:
-                    selected.append((name, members[name].value))
-                else:
-                    logger.warning(__('missing attribute %s in object %s') %
-                                   (name, self.fullname), type='autodoc')
-            return False, selected
-        elif self.options.inherited_members:
-            return False, [(m.name, m.value) for m in members.values()]
-        else:
-            return False, [(m.name, m.value) for m in members.values()
-                           if m.directly_defined]
-
     def filter_members(self, members: ObjectMembers, want_all: bool
                        ) -> List[Tuple[str, Any, bool]]:
         """Filter the given member list.
@@ -2050,9 +2024,9 @@ def update_content(self, more_content: StringList) -> None:
             attrs = [repr(self.object.__name__)]
             for constraint in self.object.__constraints__:
                 if self.config.autodoc_typehints_format == "short":
-                    attrs.append(stringify_typehint(constraint, "smart"))
+                    attrs.append(stringify_annotation(constraint, "smart"))
                 else:
-                    attrs.append(stringify_typehint(constraint))
+                    attrs.append(stringify_annotation(constraint))
             if self.object.__bound__:
                 if self.config.autodoc_typehints_format == "short":
                     bound = restify(self.object.__bound__, "smart")
@@ -2175,10 +2149,10 @@ def add_directive_header(self, sig: str) -> None:
                                              self.config.autodoc_type_aliases)
                 if self.objpath[-1] in annotations:
                     if self.config.autodoc_typehints_format == "short":
-                        objrepr = stringify_typehint(annotations.get(self.objpath[-1]),
+                        objrepr = stringify_annotation(annotations.get(self.objpath[-1]),
                                                      "smart")
                     else:
-                        objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                        objrepr = stringify_annotation(annotations.get(self.objpath[-1]))
                     self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
@@ -2494,16 +2468,6 @@ def get_doc(self) -> Optional[List[List[str]]]:
         else:
             return super().get_doc()  # type: ignore
 
-    @property
-    def _datadescriptor(self) -> bool:
-        warnings.warn('AttributeDocumenter._datadescriptor() is deprecated.',
-                      RemovedInSphinx60Warning)
-        if self.object is SLOTSATTR:
-            return True
-        else:
-            return False
-
-
 class RuntimeInstanceAttributeMixin(DataDocumenterMixinBase):
     """
     Mixin for AttributeDocumenter to provide the feature for supporting runtime
@@ -2756,10 +2720,10 @@ def add_directive_header(self, sig: str) -> None:
                                              self.config.autodoc_type_aliases)
                 if self.objpath[-1] in annotations:
                     if self.config.autodoc_typehints_format == "short":
-                        objrepr = stringify_typehint(annotations.get(self.objpath[-1]),
+                        objrepr = stringify_annotation(annotations.get(self.objpath[-1]),
                                                      "smart")
                     else:
-                        objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                        objrepr = stringify_annotation(annotations.get(self.objpath[-1]))
                     self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
@@ -2884,9 +2848,9 @@ def add_directive_header(self, sig: str) -> None:
                                               type_aliases=self.config.autodoc_type_aliases)
                 if signature.return_annotation is not Parameter.empty:
                     if self.config.autodoc_typehints_format == "short":
-                        objrepr = stringify_typehint(signature.return_annotation, "smart")
+                        objrepr = stringify_annotation(signature.return_annotation, "smart")
                     else:
-                        objrepr = stringify_typehint(signature.return_annotation)
+                        objrepr = stringify_annotation(signature.return_annotation)
                     self.add_line('   :type: ' + objrepr, sourcename)
             except TypeError as exc:
                 logger.warning(__("Failed to get a function signature for %s: %s"),

From 0d962f68f16d063b630c97dbe5569f524c8472bd Mon Sep 17 00:00:00 2001
From: Antonio Rojas <arojas@archlinux.org>
Date: Mon, 22 May 2023 23:43:42 +0200
Subject: [PATCH 2/6] Spacing

---
 src/sage_docbuild/ext/sage_autodoc.py | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/sage_docbuild/ext/sage_autodoc.py b/sage_docbuild/ext/sage_autodoc.py
index a6253d508fd..6c6e601614b 100644
--- a/sage_docbuild/ext/sage_autodoc.py
+++ b/sage_docbuild/ext/sage_autodoc.py
@@ -55,11 +55,12 @@
 from sphinx.util.inspect import (evaluate_signature, getdoc, object_description, safe_getattr,
                                  stringify_signature)
 from sphinx.util.typing import OptionSpec, get_type_hints, restify
+
 try:
     from sphinx.util.typing import stringify_annotation
 except ImportError:
     from sphinx.util.typing import stringify as stringify_annotation
-    
+
 # ------------------------------------------------------------------
 from sage.misc.sageinspect import (sage_getdoc_original,
                                    sage_getargspec, isclassinstance,

From 2dcc37915dd26485348a98442e4759aab4c3ca00 Mon Sep 17 00:00:00 2001
From: Antonio Rojas <arojas@archlinux.org>
Date: Mon, 22 May 2023 23:45:57 +0200
Subject: [PATCH 3/6] Sync get_object_members in Documenter class with upstream

---
 src/sage_docbuild/ext/sage_autodoc.py | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/sage_docbuild/ext/sage_autodoc.py b/sage_docbuild/ext/sage_autodoc.py
index 6c6e601614b..cdea4999bfe 100644
--- a/sage_docbuild/ext/sage_autodoc.py
+++ b/sage_docbuild/ext/sage_autodoc.py
@@ -648,6 +648,15 @@ def add_content(self, more_content: Optional[StringList]) -> None:
             for line, src in zip(more_content.data, more_content.items):
                 self.add_line(line, src[0], src[1])
 
+    def get_object_members(self, want_all: bool) -> tuple[bool, ObjectMembers]:
+        """Return `(members_check_module, members)` where `members` is a
+        list of `(membername, member)` pairs of the members of *self.object*.
+
+        If *want_all* is True, return all members.  Else, only return those
+        members given by *self.options.members* (which may also be None).
+        """
+        raise NotImplementedError('must be implemented in subclasses')
+
     def filter_members(self, members: ObjectMembers, want_all: bool
                        ) -> List[Tuple[str, Any, bool]]:
         """Filter the given member list.

From 0daa2b9c24a4b24f5f3e43a6f0c2e4617dcdde7c Mon Sep 17 00:00:00 2001
From: Antonio Rojas <arojas@archlinux.org>
Date: Mon, 22 May 2023 23:52:42 +0200
Subject: [PATCH 4/6] Remove no longer relevant comment

---
 src/sage_docbuild/conf.py | 2 --
 1 file changed, 2 deletions(-)

diff --git a/sage_docbuild/conf.py b/sage_docbuild/conf.py
index e2355012f00..5d16b48a73b 100644
--- a/sage_docbuild/conf.py
+++ b/sage_docbuild/conf.py
@@ -238,8 +238,6 @@ def set_intersphinx_mappings(app, config):
     app.config.intersphinx_mapping['sagemath'] = (refpath, dst)
 
     # Add intersphinx mapping for subdirectories
-    # We intentionally do not name these such that these get higher
-    # priority in case of conflicts
     for directory in os.listdir(os.path.join(invpath)):
         if directory == 'jupyter_execute':
             # This directory is created by jupyter-sphinx extension for

From 7f46a8d972d15ebd724a44d77b191145e240932b Mon Sep 17 00:00:00 2001
From: Antonio Rojas <arojas@archlinux.org>
Date: Tue, 23 May 2023 09:38:09 +0200
Subject: [PATCH 5/6] Use old Tuple type annotation

---
 src/sage_docbuild/ext/sage_autodoc.py | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/sage_docbuild/ext/sage_autodoc.py b/sage_docbuild/ext/sage_autodoc.py
index cdea4999bfe..f9e97070eb2 100644
--- a/sage_docbuild/ext/sage_autodoc.py
+++ b/sage_docbuild/ext/sage_autodoc.py
@@ -38,6 +38,7 @@
 from types import ModuleType
 from typing import (TYPE_CHECKING, Any, Callable, Dict, Iterator, List, Optional, Sequence,
                     Set, Tuple, Type, TypeVar, Union)
+from __future__ import annotations
 
 from docutils.statemachine import StringList
 
@@ -648,7 +649,7 @@ def add_content(self, more_content: Optional[StringList]) -> None:
             for line, src in zip(more_content.data, more_content.items):
                 self.add_line(line, src[0], src[1])
 
-    def get_object_members(self, want_all: bool) -> tuple[bool, ObjectMembers]:
+    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:
         """Return `(members_check_module, members)` where `members` is a
         list of `(membername, member)` pairs of the members of *self.object*.
 

From d93dc08c7e2d04c74b75406f3606224ed6b159ea Mon Sep 17 00:00:00 2001
From: Antonio Rojas <arojas@archlinux.org>
Date: Tue, 23 May 2023 10:42:32 +0200
Subject: [PATCH 6/6] Move future import where it belongs

---
 src/sage_docbuild/ext/sage_autodoc.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/sage_docbuild/ext/sage_autodoc.py b/sage_docbuild/ext/sage_autodoc.py
index f9e97070eb2..e89b8fc9ba4 100644
--- a/sage_docbuild/ext/sage_autodoc.py
+++ b/sage_docbuild/ext/sage_autodoc.py
@@ -31,6 +31,7 @@
 - Kwankyu Lee (2018-12-26, 2022-11-08): rebased on the latest sphinx.ext.autodoc
 
 """
+from __future__ import annotations
 
 import re
 import warnings
@@ -38,7 +39,6 @@
 from types import ModuleType
 from typing import (TYPE_CHECKING, Any, Callable, Dict, Iterator, List, Optional, Sequence,
                     Set, Tuple, Type, TypeVar, Union)
-from __future__ import annotations
 
 from docutils.statemachine import StringList
 
