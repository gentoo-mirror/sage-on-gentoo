diff --git a/bin/sage-runtests b/bin/sage-runtests
index 405c3f6..fa363ca 100755
--- a/bin/sage-runtests
+++ b/bin/sage-runtests
@@ -93,28 +93,6 @@ if __name__ == "__main__":
         parser.print_help()
         sys.exit(2)
 
-    # Ensure that all doctests can be run with virtual memory limited
-    # to 3300 MiB. We must set this limit before starting Sage. Note
-    # that this is a per-process limit, so we do not need to worry about
-    # running multiple doctest processes in parallel. It is in
-    # particular doctests in src/sage/schemes/elliptic_curves/heegner.py
-    # which need this much memory.
-    memlimit = 3300 << 20
-    # Python's resource module only supports limits up to sys.maxsize,
-    # even if the OS does support higher limits.
-    if memlimit <= sys.maxsize:
-        import resource
-        lim, hard = resource.getrlimit(resource.RLIMIT_AS)
-        if lim == resource.RLIM_INFINITY or lim > memlimit:
-            try:
-                resource.setrlimit(resource.RLIMIT_AS, (memlimit, hard))
-            except ValueError:
-                if sys.platform != 'cygwin':
-                    # RLIMIT_AS is not currently supported on Cygwin so
-                    # this will probably fail there:
-                    # https://trac.sagemath.org/ticket/23979
-                    raise
-
     # Limit the number of threads to 2 to save system resources.
     # See Trac #23713 and #23892
     os.environ["OMP_NUM_THREADS"] = "2"
diff --git a/sage/matrix/matrix_mod2_dense.pyx b/sage/matrix/matrix_mod2_dense.pyx
index ea0925c..99024d0 100644
--- a/sage/matrix/matrix_mod2_dense.pyx
+++ b/sage/matrix/matrix_mod2_dense.pyx
@@ -176,27 +176,6 @@ cdef class Matrix_mod2_dense(matrix_dense.Matrix_dense):   # dense or sparse
 
             sage: matrix(GF(2),0,[]) * vector(GF(2),0,[])
             ()
-
-        Large matrices fail gracefully::
-
-            sage: import resource
-            sage: if resource.RLIMIT_AS == getattr(resource, 'RLIMIT_RSS', None):
-            ....:     # Skip this test if RLIMIT_AS is not properly
-            ....:     # supported like on OS X, see Trac #24190
-            ....:     raise RuntimeError("matrix allocation failed")
-            ....: else:  # Real test
-            ....:     MatrixSpace(GF(2), 2^30)(1)
-            Traceback (most recent call last):
-            ...
-            RuntimeError: matrix allocation failed
-            sage: MatrixSpace(GF(2), 1, 2^40).zero()
-            Traceback (most recent call last):
-            ...
-            OverflowError: ...
-            sage: MatrixSpace(GF(2), 2^40, 1).zero()
-            Traceback (most recent call last):
-            ...
-            OverflowError: ...
         """
         matrix_dense.Matrix_dense.__init__(self, parent)
 
