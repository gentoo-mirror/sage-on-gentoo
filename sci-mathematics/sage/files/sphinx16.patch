diff --git a/sage_setup/docbuild/__init__.py b/sage_setup/docbuild/__init__.py
index 43156631ed..3fb41809ca 100644
diff --git a/src/sage/misc/sphinxify.py b/src/sage/misc/sphinxify.py
index f084a19..4f76d41 100644
--- a/sage/misc/sphinxify.py
+++ b/sage/misc/sphinxify.py
@@ -80,6 +80,10 @@ def sphinxify(docstring, format='html'):
     # buildername, confoverrides, status, warning, freshenv).
     confdir = os.path.join(SAGE_DOC_SRC, 'en', 'introspect')
 
+    open(os.path.join(srcdir, 'docutils.conf'), 'w').write(r"""
+[parsers]
+smart_quotes = no
+""")
     doctreedir = os.path.join(srcdir, 'doctrees')
     confoverrides = {'html_context': {}, 'master_doc': 'docstring'}
 

--- a/sage_setup/docbuild/__init__.py
+++ b/sage_setup/docbuild/__init__.py
@@ -197,8 +197,7 @@ class DocBuilder(object):
         """
         Builds the PDF files for this document.  This is done by first
         (re)-building the LaTeX output, going into that LaTeX
-        directory, and running 'make all-pdf' (or for the special case of
-        the ja docs, 'all-pdf-ja(ex,to run platex)' there.
+        directory, and running 'make all-pdf' there.
 
         EXAMPLES::
 
@@ -211,13 +210,7 @@ class DocBuilder(object):
         pdf_dir = self._output_dir('pdf')
         make_target = "cd '%s' && $MAKE %s && mv -f *.pdf '%s'"
         error_message = "failed to run $MAKE %s in %s"
-        MB_LANG = {'ja': 'all-pdf-ja'} # language name : the modified target
-
-        # Replace the command for languages that require special processing
-        if self.lang in MB_LANG:
-            command = MB_LANG[self.lang]
-        else:
-            command = 'all-pdf'
+        command = 'all-pdf'
 
         if subprocess.call(make_target%(tex_dir, command, pdf_dir), shell=True):
             raise RuntimeError(error_message%(command, tex_dir))
@@ -770,14 +763,16 @@ class ReferenceSubBuilder(DocBuilder):
         Returns the Sphinx environment for this project.
         """
         from sphinx.environment import BuildEnvironment
-        class Foo(object):
-            pass
-        config = Foo()
-        config.values = []
+        class FakeConfig(object):
+            values = tuple()
+        class FakeApp(object):
+            def __init__(self, dir):
+                self.srcdir = dir
+                self.config = FakeConfig()
 
         env_pickle = os.path.join(self._doctrees_dir(), 'environment.pickle')
         try:
-            env = BuildEnvironment.frompickle(self.dir, config, env_pickle)
+            env = BuildEnvironment.frompickle(env_pickle, FakeApp(self.dir))
             logger.debug("Opened Sphinx environment: %s", env_pickle)
             return env
         except IOError as err:
diff --git a/sage_setup/docbuild/ext/multidocs.py b/sage_setup/docbuild/ext/multidocs.py
index c66ea80725..e2108d9405 100644
--- a/sage_setup/docbuild/ext/multidocs.py
+++ b/sage_setup/docbuild/ext/multidocs.py
@@ -86,9 +86,10 @@ def merge_environment(app, env):
                 env.metadata[ind] = md
             # merge the citations
             newcite = {}
-            for ind, (path, tag) in six.iteritems(docenv.domaindata["std"]["citations"]):
+            citations = docenv.domaindata["std"]["citations"]
+            for ind, (path, tag, lineno) in six.iteritems(docenv.domaindata["std"]["citations"]):
                 # TODO: Warn on conflicts
-                newcite[ind] = (fixpath(path), tag)
+                newcite[ind] = (fixpath(path), tag, lineno)
             env.domaindata["std"]["citations"].update(newcite)
             # merge the py:module indexes
             newmodules = {}
@@ -247,9 +248,10 @@ def fetch_citation(app, env):
         cache = cPickle.load(f)
     app.builder.info("done (%s citations)."%len(cache))
     cite = env.domaindata["std"]["citations"]
-    for ind, (path, tag) in six.iteritems(cache):
+    for ind, (path, tag, lineno) in six.iteritems(cache):
         if ind not in cite: # don't override local citation
-            cite[ind]=(os.path.join("..", path), tag)
+            cite[ind] = (os.path.join("..", path), tag, lineno)
+
 
 def init_subdoc(app):
     """
diff --git a/src/sage_setup/docbuild/ext/sage_autodoc.py b/src/sage_setup/docbuild/ext/sage_autodoc.py
index 32b045c..7590e22 100644
--- a/sage_setup/docbuild/ext/sage_autodoc.py
+++ b/sage_setup/docbuild/ext/sage_autodoc.py
@@ -39,7 +39,7 @@ from sphinx.locale import _
 from sphinx.pycode import ModuleAnalyzer, PycodeError
 from sphinx.application import ExtensionError
 from sphinx.util.nodes import nested_parse_with_titles
-from sphinx.util.compat import Directive
+from docutils.parsers.rst import Directive
 from sphinx.util.inspect import getargspec, isdescriptor, safe_getmembers, \
     safe_getattr, object_description, is_builtin_class_method
 from sphinx.util.docstrings import prepare_docstring

diff --git a/sage_setup/docbuild/sphinxbuild.py b/sage_setup/docbuild/sphinxbuild.py
index c68292ceb3..1deac3d312 100644
--- a/sage_setup/docbuild/sphinxbuild.py
+++ b/sage_setup/docbuild/sphinxbuild.py
@@ -55,6 +55,8 @@ class SageSphinxLogger(object):
             re.compile('WARNING: html_static_path entry .* does not exist'),
             re.compile('WARNING: while setting up extension'),
             re.compile('WARNING: Any IDs not assiend for figure node'),
+            re.compile('WARNING: .* is not referenced'),
+            re.compile('language "hu" not supported'),
             )
 
         # replacements: pairs of regular expressions and their replacements,
