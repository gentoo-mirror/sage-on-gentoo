diff -Naur src.orig/module_list.py src/module_list.py
--- src.orig/module_list.py	2015-07-03 12:42:59.927729625 +1200
+++ src/module_list.py	2015-07-03 12:46:39.108447709 +1200
@@ -2,6 +2,7 @@
 from glob import glob
 from distutils.extension import Extension
 from sage.env import SAGE_LOCAL
+import pkgconfig
 
 SAGE_INC = os.path.join(SAGE_LOCAL, 'include')
 
@@ -9,26 +10,8 @@
 ### BLAS setup
 #########################################################
 
-## Choose cblas library -- note -- make sure to update sage/misc/cython.py
-## if you change this!!
-if 'SAGE_BLAS' in os.environ:
-    BLAS=os.environ['SAGE_BLAS']
-    BLAS2=os.environ['SAGE_BLAS']
-elif os.path.exists('%s/lib/libatlas.so'%os.environ['SAGE_LOCAL']):
-    BLAS='cblas'
-    BLAS2='atlas'
-elif os.path.exists('/usr/lib/libcblas.dylib') or \
-     os.path.exists('/usr/lib/libcblas.so'):
-    BLAS='cblas'
-    BLAS2='cblas'
-elif os.path.exists('/usr/lib/libblas.dll.a'):
-    BLAS='gslcblas'
-    BLAS2='gslcblas'
-else:
-    # This is very slow  (?), but *guaranteed* to be available.
-    BLAS='gslcblas'
-    BLAS2='gslcblas'
-
+blas_libs = list(pkgconfig.parse('cblas')['libraries'])
+blas_dir  = list(pkgconfig.parse('cblas')['library_dir'])
 
 #########################################################
 ### Commonly used definitions and aliases
@@ -37,7 +20,7 @@
 singular_incs = [SAGE_INC + '/singular', SAGE_INC + '/factory']
 
 aliases = dict(
-        GSL_LIBRARIES=['gsl', BLAS, BLAS2],
+        GSL_LIBRARIES=['gsl'] + blas_libs,
         INTERRUPT_DEPENDS=glob("sage/ext/interrupt/*.h"),
         )
 
@@ -92,7 +75,7 @@
     "zn_poly", "gap",
     "gd", "png12",
     "m", "readline", "Lfunction",
-    BLAS, BLAS2,
+    ] + blas_libs + [
     "cryptominisat", "fplll", "z"]
 
 # Make a dict with library:order pairs, where the order are negative
@@ -471,7 +454,7 @@
     ##
     ################################
 
-    Extension('*', ['sage/gsl/*.pyx']),
+    Extension('*', ['sage/gsl/*.pyx'], library_dirs = blas_dir),
 
     ################################
     ##
@@ -545,8 +528,9 @@
 
     Extension('sage.libs.linbox.linbox',
               sources = ['sage/libs/linbox/linbox.pyx'],
+              library_dirs = blas_dir,
               libraries = ['linboxsage', 'ntl', 'iml', 'linbox',
-                           'givaro', 'mpfr', 'gmp', 'gmpxx', BLAS, BLAS2],
+                           'givaro', 'mpfr', 'gmp', 'gmpxx'] + blas_libs,
               language = 'c++',
               extra_compile_args = givaro_extra_compile_args,
               depends = [os.path.join(SAGE_INC, 'givaro', 'givconfig.h')]),
@@ -889,8 +873,9 @@
 
     Extension('sage.matrix.matrix_integer_dense',
               sources = ['sage/matrix/matrix_integer_dense.pyx'],
+              library_dirs = blas_dir,
               extra_compile_args = ['-std=c99'] + m4ri_extra_compile_args,
-              libraries = ['iml', 'ntl', 'gmp', 'm', 'flint', BLAS, BLAS2],
+              libraries = ['iml', 'ntl', 'gmp', 'm', 'flint'] + blas_libs,
               depends = [SAGE_INC + '/m4ri/m4ri.h']),
 
     Extension('sage.matrix.matrix_integer_sparse',
@@ -911,14 +896,16 @@
 
     Extension('sage.matrix.matrix_modn_dense_float',
               sources = ['sage/matrix/matrix_modn_dense_float.pyx'],
+              library_dirs = blas_dir,
               language="c++",
-              libraries = ['ntl', 'linbox', 'givaro', 'mpfr', 'gmpxx', 'gmp', BLAS, BLAS2],
+              libraries = ['ntl', 'linbox', 'givaro', 'mpfr', 'gmpxx', 'gmp'] + blas_libs,
               extra_compile_args = ['-DDISABLE_COMMENTATOR'] + givaro_extra_compile_args),
 
     Extension('sage.matrix.matrix_modn_dense_double',
               sources = ['sage/matrix/matrix_modn_dense_double.pyx'],
+              library_dirs = blas_dir,
               language="c++",
-              libraries = ['ntl', 'linbox', 'givaro', 'mpfr', 'gmpxx', 'gmp', BLAS, BLAS2],
+              libraries = ['ntl', 'linbox', 'givaro', 'mpfr', 'gmpxx', 'gmp'] + blas_libs,
               extra_compile_args = ["-D_XPG6", "-DDISABLE_COMMENTATOR"]
                     + m4ri_extra_compile_args + givaro_extra_compile_args),
 
@@ -933,8 +920,9 @@
 
     Extension('sage.matrix.matrix_rational_dense',
               sources = ['sage/matrix/matrix_rational_dense.pyx'],
+              library_dirs = blas_dir,
               extra_compile_args = ["-std=c99", "-D_XPG6"] + m4ri_extra_compile_args,
-              libraries = ['iml', 'ntl', 'm', 'flint', BLAS, BLAS2],
+              libraries = ['iml', 'ntl', 'm', 'flint'] + blas_libs,
               depends = [SAGE_INC + '/m4ri/m4ri.h']),
 
     Extension('sage.matrix.matrix_rational_sparse',
diff -Naur src.orig/sage/misc/cython.py src/sage/misc/cython.py
--- src.orig/sage/misc/cython.py	2015-07-03 12:42:59.837729330 +1200
+++ src/sage/misc/cython.py	2015-07-03 12:43:34.177841868 +1200
@@ -24,53 +24,38 @@
 from temporary_file import tmp_filename
 
 
-def cblas():
+def cblas_libs():
     """
-    Return the name of the cblas library on this system. If the environment
-    variable :envvar:`$SAGE_CBLAS` is set, just return its value. If not,
-    return ``'cblas'`` if :file:`/usr/lib/libcblas.so` or
-    :file:`/usr/lib/libcblas.dylib` exists, return ``'blas'`` if
-    :file:`/usr/lib/libblas.dll.a` exists, and return ``'gslcblas'`` otherwise.
+    Return the name of the cblas library on this system. Uses pkgconfig to determine
+    the libray used.
 
     EXAMPLES::
 
-        sage: sage.misc.cython.cblas() # random -- depends on OS, etc.
+        sage: sage.misc.cython.cblas_libs() # random -- depends on OS, etc.
         'cblas'
     """
-    if 'SAGE_CBLAS' in os.environ:
-        return os.environ['SAGE_CBLAS']
-    elif os.path.exists('/usr/lib/libcblas.dylib') or \
-         os.path.exists('/usr/lib/libcblas.so'):
-        return 'cblas'
-    elif os.path.exists('/usr/lib/libblas.dll.a'):   # untested.
-        return 'blas'
-    else:
-        # This is very slow (?), but *guaranteed* to be available.
-        return 'gslcblas'
 
-# In case of ATLAS we need to link against cblas as well as atlas
-# In the other cases we just return the same library name as cblas()
-# which is fine for the linker
-#
-# We should be using the Accelerate FrameWork on OS X, but that requires
-# some magic due to distutils having ridden on the short bus :)
-def atlas():
+    import pkgconfig
+
+    return list(pkgconfig.parse('cblas')['libraries'])
+
+def cblas_dir():
     """
-    Returns the name of the ATLAS library to use. On Darwin or Cygwin, this is
-    ``'blas'``, and otherwise it is ``'atlas'``.
+    Return the path where the cblas library is located on this system if it is
+    different from the normal search path. Uses pkgconfig to determine the path.
 
     EXAMPLES::
 
-        sage: sage.misc.cython.atlas() # random -- depends on OS
-        'atlas'
+        sage: sage.misc.cython.cblas_dir() # random -- depends on OS, etc.
+        ''
     """
-    if UNAME == "Darwin" or "CYGWIN" in UNAME:
-        return 'blas'
-    else:
-        return 'atlas'
+
+    import pkgconfig
+
+    return list(pkgconfig.parse('cblas')['library_dir'])
 
 standard_libs = ['mpfr', 'gmp', 'gmpxx', 'stdc++', 'pari', 'm', \
-                 'ec', 'gsl', cblas(), atlas(), 'ntl']
+                 'ec', 'gsl'] + cblas_libs() + ['ntl']
 
 offset = 0
 
@@ -198,7 +183,6 @@
         'm',
         'ec',
         'gsl',
-        '...blas',
         ...,
         'ntl'],
         ['.../include',
@@ -207,8 +191,8 @@
         '...',
         '.../sage/ext'],
         'c',
-        [], ['-w', '-O2'])
-        sage: s, libs, inc, lang, f, args = pyx_preparse("# clang c++\n #clib foo\n # cinclude bar\n")
+        [], ['-w', '-O2'],...)
+        sage: s, libs, inc, lang, f, args, libdirs = pyx_preparse("# clang c++\n #clib foo\n # cinclude bar\n")
         sage: lang
         'c++'
 
@@ -219,7 +203,7 @@
         'pari',
         'm',
         'ec',
-        'gsl', '...blas', ...,
+        'gsl', ...,
         'ntl']
         sage: libs[1:] == sage.misc.cython.standard_libs
         True
@@ -232,7 +216,7 @@
         '...',
         '.../sage/ext']
 
-        sage: s, libs, inc, lang, f, args = pyx_preparse("# cargs -O3 -ggdb\n")
+        sage: s, libs, inc, lang, f, args, libdirs = pyx_preparse("# cargs -O3 -ggdb\n")
         sage: args
         ['-w', '-O2', '-O3', '-ggdb']
 
@@ -261,9 +245,10 @@
     s = """\ninclude "cdefs.pxi"\n""" + s
     s = """\ninclude "interrupt.pxi"  # ctrl-c interrupt block support\ninclude "stdsage.pxi"\n""" + s
     args, s = parse_keywords('cargs', s)
+    libdirs = cblas_dir()
     args = ['-w','-O2'] + args
 
-    return s, libs, inc, lang, additional_source_files, args
+    return s, libs, inc, lang, additional_source_files, args, libdirs
 
 ################################################################
 # If the user attaches a .spyx file and changes it, we have
@@ -400,7 +385,7 @@
 
     F = open(filename).read()
 
-    F, libs, includes, language, additional_source_files, extra_args = pyx_preparse(F)
+    F, libs, includes, language, additional_source_files, extra_args, libdirs = pyx_preparse(F)
 
     # add the working directory to the includes so custom headers etc. work
     includes.append(os.path.split(os.path.splitext(filename)[0])[0])
@@ -440,19 +425,17 @@
 
 from sage.env import SAGE_LOCAL
 
-extra_link_args =  ['-L' + SAGE_LOCAL + '/lib']
 extra_compile_args = %s
 
 ext_modules = [Extension('%s', sources=['%s.%s', %s],
                      libraries=%s,
-                     library_dirs=[SAGE_LOCAL + '/lib/'],
+                     library_dirs=[SAGE_LOCAL + '/lib/', '%s'],
                      extra_compile_args = extra_compile_args,
-                     extra_link_args = extra_link_args,
                      language = '%s' )]
 
 setup(ext_modules = ext_modules,
       include_dirs = %s)
-    """%(extra_args, name, name, extension, additional_source_files, libs, language, includes)
+    """%(extra_args, name, name, extension, additional_source_files, libs, libdirs, language, includes)
     open('%s/setup.py'%build_dir,'w').write(setup)
 
     cython_include = ' '.join(["-I '%s'"%x for x in includes if len(x.strip()) > 0 ])
