Description: Pass --no-readline to R otherwise Pexpect hangs
 If anyone wants to dig deeper on *why* readline is messing things up:
 By adding some debug-printing code to sage/interfaces/r.py and
 pexpect/spawnbase.py one gets the following trace:
 .
 $ ./sage -c 'r([10.4,5.6,3.1,6.4,21.7])'
 Write to R: sage0 <- 10.400000000000000
 Pexpect reads: '> '
 ----
 > 
 ----
 Write to R: options(prompt="__SAGE__R__PROMPT__> ",continue="__SAGE__R__PROMPT__> ", width=100,pager="cat",device="png")
 Pexpect reads: '1+961840267;\r\n[1] 961840268\r\n> '
 ----
 1+961840267;
 [1] 961840268
 > 
 ----
 [ rest of the trace is irrelevant ]
 .
 This then messes up the rest of the logic which causes a hang as Pexpect waits
 for the "__SAGE__R__PROMPT__> " string which is what R is *supposed* to do.
 The second number is different every time, but it's always "1+$n\r\n[1] $sum".
 .
 The hang occurs both with and without Sage's pexpect patch so I kept the patch
 out for now. (Note that if you want to apply the patch to test it yourself,
 with Debian's pexpect 4.2.0 you must first replace "self.__select" with
 "select_ignore_interrupts", everywhere that it occurs.)
Author: Ximin Luo <infinity0@debian.org>
Forwarded: TODO, maybe not-needed
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/sage/interfaces/r.py
+++ b/sage/interfaces/r.py
@@ -332,7 +332,7 @@
                   prompt = '> ', #default, later comes the change
 
                   # This is the command that starts up your program
-                  command = "R --vanilla --quiet",
+                  command = "R --no-readline --vanilla --quiet",
 
                   server=server,
                   server_tmpdir=server_tmpdir,
