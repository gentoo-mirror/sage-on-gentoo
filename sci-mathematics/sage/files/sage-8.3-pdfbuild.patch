diff --git a/sage/categories/pushout.py b/sage/categories/pushout.py
index 5022cd5..cda5ca3 100644
--- a/sage/categories/pushout.py
+++ b/sage/categories/pushout.py
@@ -1130,7 +1130,7 @@ class MultiPolynomialFunctor(ConstructionFunctor):
 
 
 class InfinitePolynomialFunctor(ConstructionFunctor):
-    """
+    r"""
     A Construction Functor for Infinite Polynomial Rings (see :mod:`~sage.rings.polynomial.infinite_polynomial_ring`).
 
     AUTHOR:
@@ -1171,7 +1171,7 @@ class InfinitePolynomialFunctor(ConstructionFunctor):
         ...
         CoercionException: Incompatible term orders lex, degrevlex
 
-    In an infinite polynomial ring with generator `a_\\ast`, the variable `a_3` will always be greater
+    In an infinite polynomial ring with generator `a_\ast`, the variable `a_3` will always be greater
     than the variable `a_1`. Hence, the orders are incompatible in the next example as well::
 
         sage: A.construction()[0]*PolynomialRing(QQ,names=['x','y','a_1','a_3'], order='lex').construction()[0]
@@ -1181,7 +1181,7 @@ class InfinitePolynomialFunctor(ConstructionFunctor):
 
     Another requirement is that after merging the order of the remaining variables must be unique.
     This is not the case in the following example, since it is not clear whether the variables `x,y`
-    should be greater or smaller than the variables `b_\\ast`::
+    should be greater or smaller than the variables `b_\ast`::
 
         sage: A.construction()[0]*PolynomialRing(QQ,names=['a_3','a_1','x','y'], order='lex').construction()[0]
         Traceback (most recent call last):
@@ -1199,7 +1199,7 @@ class InfinitePolynomialFunctor(ConstructionFunctor):
         sage: X.<w,x,y> = InfinitePolynomialRing(ZZ)
         sage: Y.<x,y,z> = InfinitePolynomialRing(QQ)
 
-    `X` and `Y` have an overlapping generators `x_\\ast, y_\\ast`. Since the default lexicographic order is
+    `X` and `Y` have an overlapping generators `x_\ast, y_\ast`. Since the default lexicographic order is
     used in both rings, it gives rise to isomorphic sub-monoids in both `X` and `Y`. They are merged in the
     pushout, which also yields a common parent for doing arithmetic::
 
diff --git a/sage/rings/polynomial/infinite_polynomial_element.py b/sage/rings/polynomial/infinite_polynomial_element.py
index 26e7e09..d45555f 100644
--- a/sage/rings/polynomial/infinite_polynomial_element.py
+++ b/sage/rings/polynomial/infinite_polynomial_element.py
@@ -1278,7 +1278,7 @@ class InfinitePolynomial_sparse(RingElement):
 
     ## Further methods
     def stretch(self, k):
-        """
+        r"""
         Stretch ``self`` by a given factor.
 
         INPUT:
@@ -1287,7 +1287,7 @@ class InfinitePolynomial_sparse(RingElement):
 
         OUTPUT:
 
-        Replace `v_n` with `v_{n\\cdot k}` for all generators `v_\\ast` occurring in self.
+        Replace `v_n` with `v_{n\\cdot k}` for all generators `v_\ast` occurring in self.
 
         EXAMPLES::
 
diff --git a/sage/rings/polynomial/infinite_polynomial_ring.py b/sage/rings/polynomial/infinite_polynomial_ring.py
index a64191d..64bb1da 100644
--- a/sage/rings/polynomial/infinite_polynomial_ring.py
+++ b/sage/rings/polynomial/infinite_polynomial_ring.py
@@ -1,4 +1,4 @@
-"""
+r"""
 Infinite Polynomial Rings.
 
 By Infinite Polynomial Rings, we mean polynomial rings in a countably
@@ -10,8 +10,8 @@ AUTHORS:
 - Simon King <simon.king@nuigalway.ie>
 - Mike Hansen <mhansen@gmail.com>
 
-An Infinite Polynomial Ring has finitely many generators `x_\\ast,
-y_\\ast,...` and infinitely many variables of the form `x_0, x_1, x_2,
+An Infinite Polynomial Ring has finitely many generators `x_\ast,
+y_\ast,...` and infinitely many variables of the form `x_0, x_1, x_2,
 ..., y_0, y_1, y_2,...,...`.  We refer to the natural number `n` as
 the *index* of the variable `x_n`.
 
@@ -599,10 +599,10 @@ class GenDictWithBasering:
 ##  The sparse implementation
 
 class InfinitePolynomialRing_sparse(CommutativeRing):
-    """
+    r"""
     Sparse implementation of Infinite Polynomial Rings.
 
-    An Infinite Polynomial Ring with generators `x_\\ast, y_\\ast,
+    An Infinite Polynomial Ring with generators `x_\ast, y_\ast,
     ...` over a field `F` is a free commutative `F`-algebra generated
     by `x_0, x_1, x_2, ..., y_0, y_1, y_2, ..., ...` and is equipped
     with a permutation action on the generators, namely `x_n^P =
