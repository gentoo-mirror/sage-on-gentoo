diff --git a/doc/common/conf.py b/doc/common/conf.py
index c4dfbf53d7..c0a31cd410 100644
--- a/doc/common/conf.py
+++ b/doc/common/conf.py
@@ -25,6 +25,7 @@ def sphinx_plot(plot):
     import matplotlib.image as mpimg
     from sage.misc.temporary_file import tmp_filename
     import matplotlib.pyplot as plt
+    plt.style.use('classic')
     if os.environ.get('SAGE_SKIP_PLOT_DIRECTIVE', 'no') != 'yes':
         fn = tmp_filename(ext=".png")
         plot.plot().save(fn)
diff --git a/doc/en/thematic_tutorials/explicit_methods_in_number_theory/introduction.rst b/doc/en/thematic_tutorials/explicit_methods_in_number_theory/introduction.rst
index 840cf6cec7..28157494b8 100644
--- a/doc/en/thematic_tutorials/explicit_methods_in_number_theory/introduction.rst
+++ b/doc/en/thematic_tutorials/explicit_methods_in_number_theory/introduction.rst
@@ -74,7 +74,7 @@ And, this example draws a similar 3d plot::
     sage: import warnings
     sage: warnings.simplefilter('ignore', UserWarning)
     sage: v = [[len(factor(n*m)) for n in [1..15]] for m in [1..15]]
-    sage: list_plot3d(v, interpolation_type='nn')
+    sage: list_plot3d(v, interpolation_type='clough')
     Graphics3d Object
 
 
diff --git a/sage/all.py b/sage/all.py
index 300f5194dd..19bc8ecba6 100644
--- a/sage/all.py
+++ b/sage/all.py
@@ -313,8 +313,6 @@ warnings.filters.remove(('ignore', None, DeprecationWarning, None, 0))
 # Ignore all deprecations from IPython etc.
 warnings.filterwarnings('ignore',
     module='.*(IPython|ipykernel|jupyter_client|jupyter_core|nbformat|notebook|ipywidgets|storemagic)')
-# Ignore warnings due to matplotlib-1.5 together with numpy-1.13
-warnings.filterwarnings('ignore', module='matplotlib[.]contour|numpy[.]ma[.]core')
 # However, be sure to keep OUR deprecation warnings
 warnings.filterwarnings('default',
     '[\s\S]*See http://trac.sagemath.org/[0-9]* for details.')
diff --git a/sage/plot/arc.py b/sage/plot/arc.py
index d18e7a7b90..3b9834ef5f 100644
--- a/sage/plot/arc.py
+++ b/sage/plot/arc.py
@@ -297,16 +297,28 @@ class Arc(GraphicPrimitive):
             sage: a = arc((0,0),2,1,0,(pi/5,pi/2+pi/12), linestyle="--", color="red")
             sage: b = a[0].bezier_path()
             sage: b[0]
-            Bezier path from (1.618..., 0.5877...) to (-0.5176..., 0.9659...)
+            Bezier path from (1.133..., 0.8237...) to (-0.2655..., 0.9911...)
         """
         from sage.plot.bezier_path import BezierPath
         from sage.plot.graphics import Graphics
+        from matplotlib.path import Path
+        import numpy as np
         ma = self._matplotlib_arc()
-        transform = ma.get_transform().get_matrix()
+        def theta_stretch(theta, scale):
+            theta = np.deg2rad(theta)
+            x = np.cos(theta)
+            y = np.sin(theta)
+            return np.rad2deg(np.arctan2(scale * y, x))
+        theta1 = theta_stretch(ma.theta1, ma.width / ma.height)
+        theta2 = theta_stretch(ma.theta2, ma.width / ma.height)
+
+        pa = ma
+        pa._path = Path.arc(theta1, theta2)
+        transform = pa.get_transform().get_matrix()
         cA, cC, cE = transform[0]
         cB, cD, cF = transform[1]
         points = []
-        for u in ma._path.vertices:
+        for u in pa._path.vertices:
             x, y = list(u)
             points += [(cA * x + cC * y + cE, cB * x + cD * y + cF)]
         cutlist = [points[0: 4]]
diff --git a/sage/plot/arrow.py b/sage/plot/arrow.py
index 98d6224acc..fbce029306 100644
--- a/sage/plot/arrow.py
+++ b/sage/plot/arrow.py
@@ -147,8 +147,8 @@ class CurveArrow(GraphicPrimitive):
         bpath = Path(self.vertices, self.codes)
         p = FancyArrowPatch(path=bpath,
                             lw=width, arrowstyle='%s,head_width=%s,head_length=%s' % (style, head_width, head_length),
-                            fc=color, ec=color)
-        p.set_linestyle(get_matplotlib_linestyle(options['linestyle'], return_type='long'))
+                            fc=color, ec=color, 
+                            linestyle=get_matplotlib_linestyle(options['linestyle'], return_type='long'))
         p.set_zorder(options['zorder'])
         p.set_label(options['legend_label'])
         subplot.add_patch(p)
@@ -336,7 +336,7 @@ class Arrow(GraphicPrimitive):
         this into account. See :trac:`12836`::
 
             sage: fig = Graphics().matplotlib()
-            sage: sp = fig.add_subplot(1,1,1)
+            sage: sp = fig.add_subplot(1,1,1, label='axis1')
             sage: a = arrow((0,0), (1,1))
             sage: b = arrow((0,0), (1,1), width=20)
             sage: p1 = a[0]._render_on_subplot(sp)
@@ -358,7 +358,7 @@ class Arrow(GraphicPrimitive):
             sage: a.save(filename=filename)
             sage: with open(filename, 'r') as f:
             ....:     contents = f.read().replace('\n', ' ')
-            sage: two_stroke_pattern = r'setdash.*stroke.*stroke.*setdash'
+            sage: two_stroke_pattern = r'setdash.*setdash.*stroke.*stroke.*setdash'
             sage: import re
             sage: two_stroke_re = re.compile(two_stroke_pattern)
             sage: two_stroke_re.search(contents) is None
@@ -383,8 +383,8 @@ class Arrow(GraphicPrimitive):
                             lw=width,
                             arrowstyle='%s,head_width=%s,head_length=%s' % (style, head_width, head_length),
                             shrinkA=arrowshorten_end, shrinkB=arrowshorten_end,
-                            fc=color, ec=color)
-        p.set_linestyle(get_matplotlib_linestyle(options['linestyle'], return_type='long'))
+                            fc=color, ec=color,
+                            linestyle=get_matplotlib_linestyle(options['linestyle'], return_type='long'))
         p.set_zorder(options['zorder'])
         p.set_label(options['legend_label'])
 
@@ -437,7 +437,7 @@ class Arrow(GraphicPrimitive):
                             pe1.draw_path(renderer, gc, tpath, affine, rgbFace)
 
             pe1 = ConditionalStroke(CheckNthSubPath(p, 0), [pe.Stroke()])
-            pe2 = ConditionalStroke(CheckNthSubPath(p, 1), [pe.Stroke(linestyle="solid")])
+            pe2 = ConditionalStroke(CheckNthSubPath(p, 1), [pe.Stroke(dashes={'dash_offset': 0, 'dash_list': None})])
             p.set_path_effects([pe1, pe2])
 
         subplot.add_patch(p)
diff --git a/sage/plot/contour_plot.py b/sage/plot/contour_plot.py
index 76077e323b..efc1f2b2ee 100644
--- a/sage/plot/contour_plot.py
+++ b/sage/plot/contour_plot.py
@@ -178,12 +178,10 @@ class ContourPlot(GraphicPrimitive):
         if fill:
             if contours is None:
                 CSF = subplot.contourf(self.xy_data_array, cmap=cmap,
-                                       extent=(x0, x1, y0, y1),
-                                       label=options['legend_label'])
+                                       extent=(x0, x1, y0, y1))
             else:
                 CSF = subplot.contourf(self.xy_data_array, contours, cmap=cmap,
-                                       extent=(x0, x1, y0, y1), extend='both',
-                                       label=options['legend_label'])
+                                       extent=(x0, x1, y0, y1), extend='both')
 
         linewidths = options.get('linewidths', None)
         if isinstance(linewidths, (int, Integer)):
@@ -200,13 +198,11 @@ class ContourPlot(GraphicPrimitive):
         if contours is None:
             CS = subplot.contour(self.xy_data_array, cmap=cmap,
                                  extent=(x0, x1, y0, y1),
-                                 linewidths=linewidths, linestyles=linestyles,
-                                 label=options['legend_label'])
+                                 linewidths=linewidths, linestyles=linestyles)
         else:
             CS = subplot.contour(self.xy_data_array, contours, cmap=cmap,
                                  extent=(x0, x1, y0, y1),
-                                 linewidths=linewidths, linestyles=linestyles,
-                                 label=options['legend_label'])
+                                 linewidths=linewidths, linestyles=linestyles)
         if options.get('labels', False):
             label_options = options['label_options']
             label_options['fontsize'] = int(label_options['fontsize'])
diff --git a/sage/plot/plot.py b/sage/plot/plot.py
index 43229875ac..a599f2d353 100644
--- a/sage/plot/plot.py
+++ b/sage/plot/plot.py
@@ -478,7 +478,7 @@ We test that ``imshow`` works as well, verifying that
 
 ::
 
-    sage: plt.imshow([[(0,0,0)]])
+    sage: plt.imshow([[(0.0,0.0,0.0)]])
     <matplotlib.image.AxesImage object at ...>
     sage: plt.savefig(os.path.join(SAGE_TMP, 'foo.png'))
 
@@ -2908,11 +2908,14 @@ def list_plot(data, plotjoined=False, **kwargs):
         If ``plotjoined`` is ``False`` then the axis that is in log scale
         must have all points strictly positive. For instance, the following
         plot will show no points in the figure since the points in the
-        horizontal axis starts from `(0,1)`.
+        horizontal axis starts from `(0,1)`. Further, matplotlib will display
+        a user warning.
 
         ::
 
             sage: list_plot(yl, scale='loglog')         # both axes are log
+            doctest:warning
+            ...
             Graphics object consisting of 1 graphics primitive
 
         Instead this will work. We drop the point `(0,1)`.::
@@ -3288,12 +3291,15 @@ def list_plot_semilogy(data, plotjoined=False, **kwds):
 
         If ``plotjoined`` is ``False`` then the vertical axis must have all
         points strictly positive. Otherwise the plot will come up empty.
-        For instance the following plot contains a point at `(1,0)`.
+        For instance the following plot contains a point at `(1,0)`. Further, 
+        matplotlib will display a user warning.
 
         ::
 
             sage: xl = [2**k for k in range(12)]; yl = range(len(xl))
             sage: list_plot_semilogy(list(zip(xl,yl))) # plot empty due to (1,0)
+            doctest:warning
+            ...
             Graphics object consisting of 1 graphics primitive
 
         We remove `(1,0)` to fix this.::
diff --git a/sage/plot/plot3d/list_plot3d.py b/sage/plot/plot3d/list_plot3d.py
index 50a4b9196e..b1000db3c1 100644
--- a/sage/plot/plot3d/list_plot3d.py
+++ b/sage/plot/plot3d/list_plot3d.py
@@ -29,21 +29,20 @@ def list_plot3d(v, interpolation_type='default', texture="automatic", point_list
 
     OPTIONAL KEYWORDS:
 
-    - ``interpolation_type`` - 'linear', 'nn' (natural neighbor), 'spline'
+    - ``interpolation_type`` - 'linear', 'clough' (CloughTocher2D), 'spline'
 
       'linear' will perform linear interpolation
 
-      The option 'nn' An interpolation method for multivariate data in a 
-      Delaunay triangulation. The value for an interpolation point is 
-      estimated using weighted values of the closest surrounding points in 
-      the triangulation. These points, the natural neighbors, are the ones 
-      the interpolation point would connect to if inserted into the 
-      triangulation.
+      The option 'clough' will interpolate by using a piecewise cubic interpolating
+      Bezier polynomial on each triangle, using a Clough-Tocher scheme.
+      The interpolant is guaranteed to be continuously differentiable.
+      The gradients of the interpolant are chosen so that the curvature of the
+      interpolating surface is approximatively minimized.
 
       The option 'spline' interpolates using a bivariate B-spline.
 
       When v is a matrix the default is to use linear interpolation, when
-      v is a list of points the default is nearest neighbor.
+      v is a list of points the default is 'clough'.
 
     - ``degree`` - an integer between 1 and 5, controls the degree of spline
       used for spline interpolation. For data that is highly oscillatory
@@ -93,14 +92,14 @@ def list_plot3d(v, interpolation_type='default', texture="automatic", point_list
 
         sage: import warnings
         sage: warnings.simplefilter('ignore', UserWarning)
-        sage: list_plot3d(m, texture='yellow', interpolation_type='nn', frame_aspect_ratio=[1, 1, 1/3])
+        sage: list_plot3d(m, texture='yellow', interpolation_type='clough', frame_aspect_ratio=[1, 1, 1/3])
         Graphics3d Object
 
     We can make this look better by increasing the number of samples.
 
     ::
 
-        sage: list_plot3d(m, texture='yellow', interpolation_type='nn', frame_aspect_ratio=[1, 1, 1/3], num_points=40)
+        sage: list_plot3d(m, texture='yellow', interpolation_type='clough', frame_aspect_ratio=[1, 1, 1/3], num_points=40)
         Graphics3d Object
 
     Let's try a spline.
@@ -141,7 +140,7 @@ def list_plot3d(v, interpolation_type='default', texture="automatic", point_list
         sage: for i in range(-5, 5):
         ....:     for j in range(-5, 5):
         ....:         l.append((normalvariate(0, 1), normalvariate(0, 1), normalvariate(0, 1)))
-        sage: list_plot3d(l, interpolation_type='nn', texture='yellow', num_points=100)
+        sage: list_plot3d(l, interpolation_type='clough', texture='yellow', num_points=100)
         Graphics3d Object
 
     TESTS:
@@ -165,7 +164,7 @@ def list_plot3d(v, interpolation_type='default', texture="automatic", point_list
     different z coordinates, an exception will be raised::
 
         sage: pts =[(-4/5, -2/5, -2/5), (-4/5, -2/5, 2/5), (-4/5, 2/5, -2/5), (-4/5, 2/5, 2/5), (-2/5, -4/5, -2/5), (-2/5, -4/5, 2/5), (-2/5, -2/5, -4/5), (-2/5, -2/5, 4/5), (-2/5, 2/5, -4/5), (-2/5, 2/5, 4/5), (-2/5, 4/5, -2/5), (-2/5, 4/5, 2/5), (2/5, -4/5, -2/5), (2/5, -4/5, 2/5), (2/5, -2/5, -4/5), (2/5, -2/5, 4/5), (2/5, 2/5, -4/5), (2/5, 2/5, 4/5), (2/5, 4/5, -2/5), (2/5, 4/5, 2/5), (4/5, -2/5, -2/5), (4/5, -2/5, 2/5), (4/5, 2/5, -2/5), (4/5, 2/5, 2/5)]
-        sage: show(list_plot3d(pts, interpolation_type='nn'))
+        sage: show(list_plot3d(pts, interpolation_type='clough'))
         Traceback (most recent call last):
         ...
         ValueError: Two points with same x,y coordinates and different z coordinates were given. Interpolation cannot handle this.
@@ -173,7 +172,7 @@ def list_plot3d(v, interpolation_type='default', texture="automatic", point_list
     Additionally we need at least 3 points to do the interpolation::
 
         sage: mat = matrix(RDF, 1, 2, [3.2, 1.550])
-        sage: show(list_plot3d(mat, interpolation_type='nn'))
+        sage: show(list_plot3d(mat, interpolation_type='clough'))
         Traceback (most recent call last):
         ...
         ValueError: We need at least 3 points to perform the interpolation
@@ -320,18 +319,18 @@ def list_plot3d_tuples(v, interpolation_type, texture, **kwds):
 
     OPTIONAL KEYWORDS:
 
-    - ``interpolation_type`` - 'linear', 'nn' (natural neighbor), 'spline'
+    - ``interpolation_type`` - 'linear', 'clough' (CloughTocher2D), 'spline'
 
       'linear' will perform linear interpolation
 
-      The option 'nn' will interpolate by using natural neighbors. The 
-      value for an interpolation point is estimated using weighted values 
-      of the closest surrounding points in the triangulation.
+      The option 'clough' will interpolate by using a piecewise cubic interpolating
+      Bezier polynomial on each triangle, using a Clough-Tocher scheme.
+      The interpolant is guaranteed to be continuously differentiable.
 
       The option 'spline' interpolates using a bivariate B-spline.
 
       When v is a matrix the default is to use linear interpolation, when
-      v is a list of points the default is nearest neighbor.
+      v is a list of points the default is 'clough'.
 
     - ``degree`` - an integer between 1 and 5, controls the degree of spline
       used for spline interpolation. For data that is highly oscillatory
@@ -373,7 +372,7 @@ def list_plot3d_tuples(v, interpolation_type, texture, **kwds):
         sage: list_plot3d([(1, 2, 3), (0, 1, 3), (2, 1, 4), (1, 0, -2)], texture='yellow', num_points=50)
         Graphics3d Object
     """
-    from matplotlib import tri, delaunay
+    from matplotlib import tri
     import numpy
     import scipy
     from random import random
@@ -439,19 +438,15 @@ def list_plot3d_tuples(v, interpolation_type, texture, **kwds):
         G._set_extra_kwds(kwds)
         return G
 
-    if interpolation_type == 'nn'  or interpolation_type =='default':
+    if interpolation_type == 'clough'  or interpolation_type =='default':
 
-        T=delaunay.Triangulation(x,y)
-        f=T.nn_interpolator(z)
-        f.default_value=0.0
-        j=numpy.complex(0,1)
-        vals=f[ymin:ymax:j*num_points,xmin:xmax:j*num_points]
+        points=[[x[i],y[i]] for i in range(len(x))]
+        j = numpy.complex(0, 1)
+        f = interpolate.CloughTocher2DInterpolator(points,z)
         from .parametric_surface import ParametricSurface
-        def g(x,y):
-            i=round( (x-xmin)/(xmax-xmin)*(num_points-1) )
-            j=round( (y-ymin)/(ymax-ymin)*(num_points-1) )
-            z=vals[int(j),int(i)]
-            return (x,y,z)
+        def g(x, y):
+            z = f([x, y])
+            return (x, y, z)
         G = ParametricSurface(g, (list(numpy.r_[xmin:xmax:num_points*j]), list(numpy.r_[ymin:ymax:num_points*j])), texture=texture, **kwds)
         G._set_extra_kwds(kwds)
         return G
diff --git a/sage/probability/probability_distribution.pyx b/sage/probability/probability_distribution.pyx
index 3ce464202a..f66cd898b9 100644
--- a/sage/probability/probability_distribution.pyx
+++ b/sage/probability/probability_distribution.pyx
@@ -118,7 +118,7 @@ cdef class ProbabilityDistribution:
             sage: P = [0.3, 0.4, 0.3]
             sage: X = GeneralDiscreteDistribution(P)
             sage: h, b = X.generate_histogram_data(bins = 10)
-            sage: h
+            sage: h  # rel tol 1e-08
             [1.6299999999999999,
              0.0,
              0.0,
