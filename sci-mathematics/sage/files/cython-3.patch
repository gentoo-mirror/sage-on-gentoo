diff --git a/sage/ext/stdsage.pxd b/sage/ext/stdsage.pxd
index 15abe13b7cd..e2bf7434f35 100644
--- a/sage/ext/stdsage.pxd
+++ b/sage/ext/stdsage.pxd
@@ -10,7 +10,7 @@ Standard C helper code for Cython modules
 #                  http://www.gnu.org/licenses/
 #*****************************************************************************

-from cpython.object cimport Py_TYPE, PyTypeObject
+from cpython.object cimport Py_TYPE, PyTypeObject, PyObject


 cdef inline PY_NEW(type t):
@@ -19,7 +19,7 @@ cdef inline PY_NEW(type t):
     :class:`Integer` where we change ``tp_new`` at runtime (Cython
     optimizations assume that ``tp_new`` doesn't change).
     """
-    return (<PyTypeObject*>t).tp_new(t, <object>NULL, <object>NULL)
+    return (<PyTypeObject*>t).tp_new(t, <PyObject*>NULL, <PyObject*>NULL)


 cdef inline void PY_SET_TP_NEW(type dst, type src):

diff --git a/sage/arith/srange.pyx b/sage/arith/srange.pyx
index 156e548a11a..132cf93d085 100644
--- a/sage/arith/srange.pyx
+++ b/sage/arith/srange.pyx
@@ -84,7 +84,7 @@ def xsrange(start, end=None, step=1, universe=None, *, coerce=True, bint include
     EXAMPLES::

         sage: xsrange(10)
-        <generator object at 0x...>
+        <...generator object at 0x...>
         sage: for i in xsrange(1,5):
         ....:     print(i)
         1
diff --git a/sage/combinat/sloane_functions.py b/sage/combinat/sloane_functions.py
index c3cf9299093..e5c99b71fe7 100644
--- a/sage/combinat/sloane_functions.py
+++ b/sage/combinat/sloane_functions.py
@@ -9169,7 +9169,7 @@ def __getattribute__(self, name):
         ::

             sage: sloane.__repr__
-            <method-wrapper '__repr__' of Sloane object at 0x...>
+            <built-in method __repr__ of Sloane object at 0x...>
             sage: sloane.__name__
             Traceback (most recent call last):
             ...
diff --git a/sage/misc/cachefunc.pyx b/sage/misc/cachefunc.pyx
index 8aa30a85272..2b1d38c12b9 100644
--- a/sage/misc/cachefunc.pyx
+++ b/sage/misc/cachefunc.pyx
@@ -50,7 +50,7 @@ be used::
     sage: cython('''cpdef test_funct(x): return -x''')
     sage: wrapped_funct = cached_function(test_funct, name='wrapped_funct')
     sage: wrapped_funct
-    Cached version of <built-in function test_funct>
+    Cached version of <cyfunction test_funct at ...>
     sage: wrapped_funct.__name__
     'wrapped_funct'
     sage: wrapped_funct(5)
@@ -82,9 +82,9 @@ approach is still needed for cpdef methods::
     sage: cython(os.linesep.join(cython_code))
     sage: O = MyClass()
     sage: O.direct_method
-    Cached version of <method 'direct_method' of '...MyClass' objects>
+    Cached version of <cyfunction MyClass.direct_method at ...>
     sage: O.wrapped_method
-    Cached version of <built-in function test_meth>
+    Cached version of <cyfunction test_meth at ...>
     sage: O.wrapped_method.__name__
     'wrapped_method'
     sage: O.wrapped_method(5)
@@ -270,6 +270,7 @@ Introspection works::
         "some doc for a wrapped cython method"
         return -x
     sage: print(sage_getsource(O.direct_method))
+    @cached_method
     def direct_method(self, x):
         "Some doc for direct method"
         return 2*x
diff --git a/sage/misc/lazy_import.pyx b/sage/misc/lazy_import.pyx
index c33a1e74efd..7fc73407ace 100644
--- a/sage/misc/lazy_import.pyx
+++ b/sage/misc/lazy_import.pyx
@@ -1095,7 +1095,7 @@ def lazy_import(module, names, as_=None, *,
         sage: lazy_import('ppl', 'equation',
         ....:             feature=PythonModule('ppl', spkg='pplpy', type='standard'))
         sage: equation                                                                  # needs pplpy
-        <built-in function equation>
+        <cyfunction equation at ...>
         sage: lazy_import('PyNormaliz', 'NmzListConeProperties', feature=PythonModule('PyNormaliz', spkg='pynormaliz'))  # optional - pynormaliz
         sage: NmzListConeProperties  # optional - pynormaliz
         <built-in function NmzListConeProperties>
diff --git a/sage/misc/lazy_list.pyx b/sage/misc/lazy_list.pyx
index ba62c446b69..cd750933860 100644
--- a/sage/misc/lazy_list.pyx
+++ b/sage/misc/lazy_list.pyx
@@ -678,7 +678,7 @@ cdef class lazy_list_generic():
             sage: from itertools import count
             sage: from sage.misc.lazy_list import lazy_list
             sage: iter(lazy_list(count()))
-            <generator object at 0x...>
+            <...generator object at 0x...>

         ::

diff --git a/sage/misc/sageinspect.py b/sage/misc/sageinspect.py
index ce5e9987027..df8e6bf89ac 100644
--- a/sage/misc/sageinspect.py
+++ b/sage/misc/sageinspect.py
@@ -76,8 +76,8 @@
     sage: sage_getdoc(sage.rings.rational.make_rational).lstrip()
     'Make a rational number ...'

-    sage: sage_getsource(sage.rings.rational.make_rational)[4:]
-    'make_rational(s):...'
+    sage: sage_getsource(sage.rings.rational.make_rational)
+    '@cython.binding(True)\ndef make_rational(s):...'

 Python functions::

diff --git a/sage/modules/free_module_element.pyx b/sage/modules/free_module_element.pyx
index d5e8256b68c..c9af9bcbdf7 100644
--- a/sage/modules/free_module_element.pyx
+++ b/sage/modules/free_module_element.pyx
@@ -1634,7 +1634,7 @@ cdef class FreeModuleElement(Vector):   # abstract base class

             sage: v = vector([1,2/3,pi])                                                # needs sage.symbolic
             sage: v.items()                                                             # needs sage.symbolic
-            <generator object at ...>
+            <...generator object at ...>
             sage: list(v.items())                                                       # needs sage.symbolic
             [(0, 1), (1, 2/3), (2, pi)]

diff --git a/sage/rings/finite_rings/finite_field_base.pyx b/sage/rings/finite_rings/finite_field_base.pyx
index 7e2eed91153..3a6db8995c6 100644
--- a/sage/rings/finite_rings/finite_field_base.pyx
+++ b/sage/rings/finite_rings/finite_field_base.pyx
@@ -328,7 +328,7 @@ cdef class FiniteField(Field):
             sage: p = next_prime(2^64)
             sage: k.<a> = FiniteField(p^2, impl="pari")
             sage: it = iter(k); it
-            <generator object at ...>
+            <...generator object at ...>
             sage: [next(it) for i in range(10)]
             [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

diff --git a/sage/rings/polynomial/skew_polynomial_finite_field.pyx b/sage/rings/polynomial/skew_polynomial_finite_field.pyx
index 41951687939..c6b67cba5fb 100644
--- a/sage/rings/polynomial/skew_polynomial_finite_field.pyx
+++ b/sage/rings/polynomial/skew_polynomial_finite_field.pyx
@@ -629,7 +629,7 @@ cdef class SkewPolynomial_finite_field_dense(SkewPolynomial_finite_order_dense):
             sage: S.<x> = k['x',Frob]
             sage: a = x^4 + 2*t*x^3 + 3*t^2*x^2 + (t^2 + t + 1)*x + 4*t + 3
             sage: iter = a.right_irreducible_divisors(); iter
-            <generator object at 0x...>
+            <...generator object at 0x...>
             sage: next(iter)   # random
             x + 2*t^2 + 4*t + 4
             sage: next(iter)   # random
@@ -664,7 +664,7 @@ cdef class SkewPolynomial_finite_field_dense(SkewPolynomial_finite_order_dense):
             sage: S.<x> = k['x',Frob]
             sage: a = x^4 + 2*t*x^3 + 3*t^2*x^2 + (t^2 + t + 1)*x + 4*t + 3
             sage: iter = a.left_irreducible_divisors(); iter
-            <generator object at 0x...>
+            <...generator object at 0x...>
             sage: next(iter)  # random
             x + 3*t + 3
             sage: next(iter)  # random
@@ -1052,7 +1052,7 @@ cdef class SkewPolynomial_finite_field_dense(SkewPolynomial_finite_order_dense):
             sage: S.<x> = k['x',Frob]
             sage: a = x^3 + (t^2 + 1)*x^2 + (2*t + 3)*x + t^2 + t + 2
             sage: iter = a.factorizations(); iter
-            <generator object at 0x...>
+            <...generator object at 0x...>
             sage: next(iter)   # random
             (x + 3*t^2 + 4*t) * (x + 2*t^2) * (x + 4*t^2 + 4*t + 2)
             sage: next(iter)   # random
diff --git a/sage/structure/coerce_dict.pyx b/sage/structure/coerce_dict.pyx
index a2e8443084c..ef86c6af35c 100644
--- a/sage/structure/coerce_dict.pyx
+++ b/sage/structure/coerce_dict.pyx
@@ -777,7 +777,7 @@ cdef class MonoDict:
             sage: L[1] = None
             sage: L[2] = True
             sage: L.items()
-            <generator object at ...>
+            <...generator object at ...>
             sage: sorted(L.items())
             [(1, None), (2, True)]
         """
@@ -1452,7 +1452,7 @@ cdef class TripleDict:
             sage: L = TripleDict()
             sage: L[1,2,3] = None
             sage: L.items()
-            <generator object at ...>
+            <...generator object at ...>
             sage: list(L.items())
             [((1, 2, 3), None)]
         """
diff --git a/sage/tests/cmdline.py b/sage/tests/cmdline.py
index ad0c44aa274..f14cd2db768 100644
--- a/sage/tests/cmdline.py
+++ b/sage/tests/cmdline.py
@@ -491,9 +491,8 @@ def test_executable(args, input="", timeout=100.0, pydebug_ignore_warnings=False

         sage: (out, err, ret) = test_executable(["sage", "--cython"])
         sage: print(err)
-        Cython (http://cython.org) is a compiler for code written in the
-        Cython language.  Cython is based on Pyrex by Greg Ewing.
         ...
+        cython: error: cython: Need at least one source file

         sage: def has_tty():
         ....:     try:

diff --git a/sage/misc/cython.py b/sage/misc/cython.py
index 5f83f585c3a..347b2e896d8 100644
--- a/sage/misc/cython.py
+++ b/sage/misc/cython.py
@@ -21,6 +21,7 @@

 import builtins
 import os
+import re
 import sys
 import shutil

@@ -396,6 +397,12 @@ def cython(filename, verbose=0, compile_message=False,
         raise RuntimeError(cython_messages.strip())

     if verbose >= 0:
+        # triggered by Cython 3 with unpatched cysignals 1.11.2
+        cython_messages = re.sub(
+            "^.*The keyword 'nogil' should appear at the end of the function signature line. "
+            "Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.\n",
+            "", cython_messages, 0, re.MULTILINE)
+
         sys.stderr.write(cython_messages)
         sys.stderr.flush()

