#!/usr/bin/env bash

# Display the current version of Sage
# usage: sage_version [-v]
#   -v    display the full version banner including release date
sage_version() {
    . @GENTOO_PORTAGE_EPREFIX@/usr/bin/sage-version.sh

    if [ "$1" = "-v" ]; then
        echo "${SAGE_VERSION_BANNER}"
    else
        echo "${SAGE_VERSION}"
    fi
}

usage() {
    sage_version -v
    ####  1.......................26..................................................78
    ####  |.....................--.|...................................................|
    echo
    echo "Optional arguments:"
    echo "  file.[sage|py|spyx] -- run given .sage, .py or .spyx file"
    echo "  -advanced           -- list all command line options"
    echo "  -c <cmd>            -- Evaluates cmd as sage code"
    echo "  -gap [...]          -- run Sage's Gap with given arguments"
    echo "  -gp [...]           -- run Sage's PARI/GP calculator with given arguments"
    echo "  -h, -?              -- print this help message"
    echo "  -inotebook [...]    -- start the *insecure* Sage notebook (deprecated)"
    echo "  -maxima [...]       -- run Sage's Maxima with given arguments"
    echo "  -mwrank [...]       -- run Sage's mwrank with given arguments"
    echo "  --notebook=[...]    -- start the Sage notebook (valid options are"
    echo "                         'default', 'sagenb', 'jupyter', and 'export')"
    echo "                         Current default is 'export' from sagenb to jupyter"
    echo "  -n, --notebook      -- shortcut for --notebook=default"
    echo "  -python [...]       -- run the Python interpreter"
    echo "  -python2 [...]      -- run the Python 2 interpreter"
    echo "  -python3 [...]      -- run the Python 3 interpreter"
    echo "  -R [...]            -- run Sage's R with given arguments"
    echo "  -singular [...]     -- run Sage's singular with given arguments"
    echo "  -sqlite3 [...]      -- run Sage's sqlite3 with given arguments"
    echo "  --nodotsage         -- run Sage without using the user's .sage directory:"
    echo "                         create and use a temporary .sage directory instead"
    echo "  -t [options] <--all|files|dir>"
    echo "                      -- test examples in .py, .pyx, .sage, .tex or .rst files"
    echo "                         selected options:"
    echo "                           --long - include lines with the phrase 'long time'"
    echo "                           --verbose - print debugging output during the test"
    echo "                           --optional - controls which optional tests are run"
    echo "                           --sagenb - test all sagenb files"
    echo "                           --help - show all testing options"
    echo "  -v, -version        -- display Sage version information"
    exit 0
}

usage_advanced() {
    sage_version -v
    ####  1.......................26..................................................78
    ####  |.....................--.|...................................................|
    echo
    echo "Running Sage:"
    echo "  file.[sage|py|spyx] -- run given .sage, .py or .spyx file"
    echo "  -advanced           -- print this advanced help message"
    echo "  -c <cmd>            -- Evaluates cmd as sage code"
    echo "  -h, -?              -- print short help message"
    echo "  -min [...]          -- do not populate global namespace (must be first"
    echo "                         option)"
    echo "  -preparse <file.sage> -- preparse file.sage and produce corresponding file.sage.py"
    echo "  -q                  -- quiet; start with no banner"
    echo "  -gthread, -qthread, -q4thread, -wthread, -pylab"
    echo "                      -- pass the option through to ipython"
    echo "  -v, -version        -- display Sage version information"
    echo "  -dumpversion        -- print Sage version"

    echo
    ####  1.......................26..................................................78
    ####  |.....................--.|...................................................|
    echo "Running the notebook:"
    echo "  --notebook=[...]    -- start the Sage notebook (valid options are"
    echo "                         'default', 'sagenb', 'jupyter' and 'export')."
    echo "                         Current default is 'export' sagenb to jupyter."
    echo "                         See the output of sage --notebook --help"
    echo "                         for more details and examples of how to pass"
    echo "                         optional arguments"
    echo "  -inotebook [...]    -- start the *insecure* Sage notebook (deprecated)"
    echo "  -n, -notebook [...] -- start the default Sage notebook (options are the"
    echo "                         same as for the notebook command in Sage).  See the"
    echo "                         output of sage -n -h for more details"

    echo
    ####  1.......................26..................................................78
    ####  |.....................--.|...................................................|
    echo "Running external programs:"
    echo "  -cleaner            -- run the Sage cleaner"
    echo "  -cython [...]       -- run Cython with given arguments"
    echo "  -ecl [...]          -- run Common Lisp"
    echo "  -gap [...]          -- run Sage's Gap with given arguments"
    echo "  -gdb                -- run Sage under the control of gdb"
    echo "  -gp [...]           -- run Sage's PARI/GP calculator with given arguments"
    echo "  -ipython [...]      -- run Sage's IPython using the default environment (not"
    echo "                         Sage), passing additional options to IPython"
    echo "  -ipython3 [...]     -- same as above, but using Python 3"
    echo "  -jupyter [...]      -- run Sage's Jupyter with given arguments"
    echo "  -kash [...]         -- run Sage's Kash with given arguments"
    command -v kash &>/dev/null || \
    echo "                         (not installed currently, run sage -i kash)"
    echo "  -lisp [...]         -- run Lisp interpreter included with Sage"
    echo "  -M2 [...]           -- run Sage's Macaulay2 with given arguments"
    command -v M2 &>/dev/null || \
    echo "                         (not installed currently, run sage -i macaulay2)"
    echo "  -maxima [...]       -- run Sage's Maxima with given arguments"
    echo "  -mwrank [...]       -- run Sage's mwrank with given arguments"
    echo "  -polymake [...]     -- run Sage's Polymake with given arguments"
    command -v polymake &>/dev/null || \
    echo "                         (not installed currently, run sage -i polymake)"
    echo "  -python [...]       -- run the Python interpreter"
    echo "  -python2 [...]      -- run the Python 2 interpreter"
    echo "  -python3 [...]      -- run the Python 3 interpreter"
    echo "  -R [...]            -- run Sage's R with given arguments"
    echo "  -sh [...]           -- run \$SHELL ($SHELL) with Sage environment variables"
    echo "  -singular [...]     -- run Sage's singular with given arguments"
    echo "  -sqlite3 [...]      -- run Sage's sqlite3 with given arguments"
    echo "  -twistd [...]       -- run Twisted server"

    echo
    ####  1.......................26..................................................78
    ####  |.....................--.|...................................................|
    echo "Testing the Sage library:"
    echo "  -startuptime [module] -- display how long each component of Sage takes to"
    echo "                         start up; optionally specify a module to get more"
    echo "                         details about that particular module"
    echo "  -t [options] <--all|files|dir>"
    echo "                      -- test examples in .py, .pyx, .sage, .tex or .rst files"
    echo "                         selected options:"
    echo "                           --long - include lines with the phrase 'long time'"
    echo "                           --verbose - print debugging output during the test"
    echo "                           --all - test all files"
    echo "                           --sagenb - test all sagenb files"
    echo "                           --optional - controls which optional tests are run"
    echo "                           --initial - only show the first failure per block"
    echo "                           --debug - drop into PDB after an unexpected error"
    echo "                           --failed - only test files that failed last test"
    echo "                           --warn-long [timeout] - warning if doctest is slow"
    echo "                           --only-errors - only output failures, not successes"
    echo "                           --gc=GC - control garbarge collection (ALWAYS:"
    echo "                                     collect garbage before every test; NEVER:"
    echo "                                     disable gc; DEFAULT: Python default)"
    echo "                           --help - show all testing options"
    echo "  -tp <N> [...]       -- like -t above, but tests in parallel using N threads"
    echo "                         with 0 interpreted as a sensible default"
    echo "  -testall [options]  -- test all source files, docs, and examples.  options"
    echo "                         like -t"

    echo
    ####  1.......................26..................................................78
    ####  |.....................--.|...................................................|
    echo "File conversion:"
    echo "  -rst2ipynb [...]    -- Generates Jupyter notebook (.ipynb) from standalone"
    echo "                         reStructuredText source."
    command -v rst2ipynb &>/dev/null || \
    echo "                         (not installed currently, run sage -i rst2ipynb)"
    echo "  -ipynb2rst [...]    -- Generates a reStructuredText source file from"
    echo "                         a Jupyter notebook (.ipynb)."
    echo "  -rst2txt [...]      -- Generates Sage worksheet text file from standalone"
    echo "                         reStructuredText source."
    echo "  -rst2sws [...]      -- Generates Sage worksheet (.sws) from standalone"
    echo "                         reStructuredText source."
    echo "  -sws2rst <sws doc>  -- Generates a reStructuredText source file from"
    echo "                         a Sage worksheet (.sws) document."

    echo
    ####  1.......................26..................................................78
    ####  |.....................--.|...................................................|
    echo "Valgrind memory debugging:"
    echo "  -cachegrind         -- run Sage using Valgrind's cachegrind tool.  The log"
    echo "                         files are named sage-cachegrind.PID can be found in"
    echo "                         $DOT_SAGE"
    echo "  -callgrind          -- run Sage using Valgrind's callgrind tool.  The log"
    echo "                         files are named sage-callgrind.PID can be found in"
    echo "                         $DOT_SAGE"
    echo "  -massif             -- run Sage using Valgrind's massif tool.  The log"
    echo "                         files are named sage-massif.PID can be found in"
    echo "                         $DOT_SAGE"
    echo "  -memcheck           -- run Sage using Valgrind's memcheck tool.  The log"
    echo "                         files are named sage-memcheck.PID can be found in"
    echo "                         $DOT_SAGE"
    echo "  -omega              -- run Sage using Valgrind's omega tool.  The log"
    echo "                         files are named sage-omega.PID can be found in"
    echo "                         $DOT_SAGE"
    echo "  -valgrind           -- this is an alias for -memcheck"
    echo
    echo "You can also use -- before a long option, e.g., 'sage --optional'."
    echo
    exit 0
}


#####################################################################
# Special options to be processed without sage-env
#####################################################################

# Check for '--nodotsage' before sourcing sage-env; otherwise sage-env
# will already have set some environment variables with the old
# setting for DOT_SAGE.
if [ "$1" = '--nodotsage' ]; then
    export DOT_SAGE=`mktemp -d ${TMPDIR:-/tmp}/dotsageXXXXXX`
    shift
    command "$0" "$@"
    status=$?
    rm -rf "$DOT_SAGE"
    exit $status
fi

#####################################################################
# Report information about the Sage environment
#####################################################################

if [ "$1" = '-dumpversion' -o "$1" = '--dumpversion' ]; then
        sage_version
        exit 0
fi

if [ "$1" = '-v' -o "$1" = '-version' -o "$1" = '--version' ]; then
        sage_version -v
        exit 0
fi

if [ $# -gt 0 ]; then
  if [ "$1" = '-h' -o "$1" = '-?' -o "$1" = '-help' -o "$1" = '--help' ]; then
     usage
  fi
  if [ "$1" = "-advanced" -o "$1" = "--advanced" ]; then
     usage_advanced
  fi
fi


#####################################################################
# setup variables usually established by sage-env.
#####################################################################
if [[ -z ${DOT_SAGE} ]]; then
	export DOT_SAGE="${HOME}/.sage"
fi

if [ "$SAGE_STARTUP_FILE" = "" ]; then
	export SAGE_STARTUP_FILE="${DOT_SAGE}/init.sage"
fi

if [ -z "$SAGE_RC_FILE" ]; then
	export SAGE_RC_FILE="$DOT_SAGE/sagerc"
fi

if [ -r "$SAGE_RC_FILE" ]; then
	source "$SAGE_RC_FILE"
	if [ $? -ne 0 ]; then
		echo >&2 "Error sourcing $SAGE_RC_FILE"
		exit 1
	fi
fi

export SAGE_DEBUG="no"

# By default use python 2.7 but starting with 8.0 sage can be built with 3.6
if [[ -z ${EPYTHON} ]]; then
	export EPYTHON=python2.7
fi

# Allow SAGE_BROWSER to override BROWSER (Trac #22449)
if [ -n "$SAGE_BROWSER" ]; then
	export BROWSER="$SAGE_BROWSER"
fi
#####################################################################
# End of sage-env block
#####################################################################

# Prepare for running Sage, either interactively or non-interactively.
sage_setup() {
    sage-cleaner &>/dev/null &
}

# Start an interactive Sage session, this function never returns.
interactive_sage() {
    sage_setup
    exec sage-ipython "$@" -i
}

if [ "$1" = '-min' -o "$1" = '--min' ]; then
    shift
    export SAGE_IMPORTALL=no
fi

if [ "$1" = '-q' ]; then
    shift
    export SAGE_BANNER=no
fi

if [ $# -eq 0 ]; then
    interactive_sage
fi

if [ "$1" = '-cleaner' -o "$1" = '--cleaner' ]; then
    exec sage-cleaner
fi

#####################################################################
# Run Sage's versions of the standard Algebra/Geometry etc. software
#####################################################################

if [ "$1" = '-axiom' -o "$1" = '--axiom' ]; then
    shift
    exec axiom "$@"
fi

if [ "$1" = '-gap' -o "$1" = '--gap' ]; then
    shift
    exec gap "$@"
fi

if [ "$1" = '-gp' -o "$1" = '--gp' ]; then
    shift
    exec gp "$@"
fi

if [ "$1" = '-polymake' -o "$1" = '--polymake' ]; then
    shift
    exec polymake "$@"
fi

if [ "$1" = '-singular' -o "$1" = '--singular' ]; then
    shift
    exec Singular "$@"
fi

if [ "$1" = '-sqlite3' -o "$1" = '--sqlite3' ]; then
    shift
    exec sqlite3 "$@"
fi

if [ "$1" = '-sws2rst' -o "$1" = '--sws2rst' ]; then
    shift
    exec sage-sws2rst "$@"
fi

if [ "$1" = '-twistd' -o "$1" = '--twistd' ]; then
    shift
    exec twistd "$@"
fi

if [ "$1" = '-ecl' -o "$1" = '--ecl' ]; then
    shift
    exec ecl "$@"
fi

if [ "$1" = '-lisp' -o "$1" = '--lisp' ]; then
    shift
    exec ecl "$@"
fi

if [ "$1" = '-kash' -o "$1" = '--kash' ]; then
    shift
    exec kash "$@"
fi

if [ "$1" = '-maxima' -o "$1" = '--maxima' ]; then
    shift
    exec maxima "$@"
fi

if [ "$1" = '-mwrank' -o "$1" = '--mwrank' ]; then
    shift
    exec mwrank "$@"
fi

if [ "$1" = '-M2' -o "$1" = '--M2' ]; then
    shift
    exec M2 "$@"
fi

if [ "$1" = '-python' -o "$1" = '--python' ]; then
    shift
    exec python "$@"
fi

if [ "$1" = '-python2' -o "$1" = '--python2' ]; then
    shift
    exec python2 "$@"
fi

if [ "$1" = '-python3' -o "$1" = '--python3' ]; then
    shift
    exec python3 "$@"
fi

if [ "$1" = '-R' -o "$1" = '--R' ]; then
    shift
    exec R "$@"
fi

if [ "$1" = '-ipython' -o "$1" = '--ipython' ]; then
    shift
    exec ipython "$@"
fi

if [ "$1" = '-ipython3' -o "$1" = '--ipython3' ]; then
    shift
    exec ipython3 "$@"
fi

if [ "$1" = '-jupyter' -o "$1" = '--jupyter' ]; then
    shift
    exec jupyter "$@"
fi

if [ "$1" = '-git' -o "$1" = '--git' ]; then
    shift
    exec git "$@"
fi

#####################################################################
# File conversion
#####################################################################

if [ "$1" = '-rst2ipynb' -o "$1" = '--rst2ipynb' ]; then
    shift
    rst2ipynb --kernel=sagemath "$@"
    status="${?}"
    if [ "${status}" -eq "127" ] ; then echo 'rst2ipynb is not installed, please run "sage -i rst2ipynb"' ; fi
    exit ${status}
fi

if [ "$1" = '-ipynb2rst' -o "$1" = '--ipynb2rst' ]; then
    shift
    exec sage-ipynb2rst "$@"
fi

if [ "$1" = '-rst2txt' -o "$1" = '--rst2txt' ]; then
    shift
    exec sage-rst2txt "$@"
fi

if [ "$1" = '-rst2sws' -o "$1" = '--rst2sws' ]; then
    shift
    exec sage-rst2sws "$@"
fi

#####################################################################
# Run Sage's versions of the standard Algebra/Geometry etc. software
#####################################################################

if [[ "$1" =~ ^--notebook=.* || "$1" =~ ^-n=.* || "$1" =~ ^-notebook=.* ]] ; then
    sage-cleaner &>/dev/null &
    exec sage-notebook "$@"
fi

if [ "$1" = "-notebook" -o "$1" = '--notebook' -o "$1" = '-n' ]; then
    sage-cleaner &>/dev/null &
    exec sage-notebook "$@"
fi

if [ "$1" = "-inotebook" -o "$1" = '--inotebook' ]; then
    shift
    sage-cleaner &>/dev/null &
    exec sage-notebook --notebook=sagenb secure=False "$@"
fi

if [ "$1" = '-r' ]; then
    shift
    interactive_sage
fi

if [ "$1" = '-t' -o "$1" = '-tp' ]; then
    sage_setup
    export PYTHONIOENCODING="utf-8"  # Fix encoding for doctests
    if [ "$1" = '-tp' ]; then
        shift
        exec sage-runtests -p "$@"
    else
        shift
        exec sage-runtests "$@"
    fi
fi

if [ "$1" = '-testall' -o "$1" = "--testall" ]; then
    shift
    sage_setup
    export PYTHONIOENCODING="utf-8"  # Fix encoding for doctests
    exec sage-runtests -a "$@"
fi

if [ "$1" = '-c' ]; then
    shift
    sage_setup
    unset TERM  # See Trac #12263
    exec sage-eval "$@"
fi

if [ "$1" = '-gdb' -o "$1" = "--gdb" ]; then
    shift
    sage_setup
    if [ "$SAGE_DEBUG" = "no" ]; then
        gdb -x "@GENTOO_PORTAGE_EPREFIX@/usr/bin/sage-gdb-commands" \
            -args python "@GENTOO_PORTAGE_EPREFIX@/usr/bin/sage-ipython" "$@" -i
    else
        sage_dir=$(python -c 'import os, sage; print(os.path.dirname(sage.__file__))')
        cygdb "$sage_dir" "$sage_dir" \
            -- -x "@GENTOO_PORTAGE_EPREFIX@/usr/bin/sage-gdb-commands" \
            -args python "@GENTOO_PORTAGE_EPREFIX@/usr/bin/sage-ipython" "$@" -i
    fi
    exit $?
fi

if [ "$1" = '-preparse' -o "$1" = "--preparse" ]; then
    shift
    exec sage-preparse "$@"
fi

if [ "$1" = "-cython" -o "$1" = '--cython' -o "$1" = '-pyrex' -o "$1" = "--pyrex" ]; then
    shift
    exec sage-cython "$@"
fi

if [ "$1" = '-valgrind' -o "$1" = "--valgrind" -o "$1" = '-memcheck' -o "$1" = "--memcheck" ]; then
    shift
    sage_setup
    exec sage-valgrind "$@"
fi

if [ "$1" = '-massif' -o "$1" = "--massif" ]; then
    shift
    sage_setup
    exec sage-massif "$@"
fi

if [ "$1" = '-cachegrind' -o "$1" = "--cachegrind" ]; then
    shift
    sage_setup
    exec sage-cachegrind "$@"
fi

if [ "$1" = '-callgrind' -o "$1" = "--callgrind" ]; then
    shift
    sage_setup
    exec sage-callgrind "$@"
fi

if [ "$1" = '-omega' -o "$1" = "--omega" ]; then
    shift
    sage_setup
    exec sage-omega "$@"
fi

if [ "$1" = '-startuptime' -o "$1" = '--startuptime' ]; then
    exec sage-startuptime.py "$@"
fi

if [ "$1" = '-gthread' -o "$1" = '-qthread' -o "$1" = '-q4thread' -o "$1" = '-wthread' -o "$1" = '-pylab' ]; then
    # Intentionally no "shift" here
    interactive_sage "$@"
fi

if [ $# -ge 1 ]; then
    sage_setup
    unset TERM  # See Trac #12263
    exec sage-run "$@"
fi
